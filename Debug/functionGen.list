
functionGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b3c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08005cc8  08005cc8  00015cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001fc  080062b4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  080062b4  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8a9  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa8  00000000  00000000  0002ead5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e58  00000000  00000000  00032128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b007  00000000  00000000  00058f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f43c8  00000000  00000000  00063f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015834f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  001583cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001fc 	.word	0x200001fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cac 	.word	0x08005cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000200 	.word	0x20000200
 80001c4:	08005cac 	.word	0x08005cac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b972 	b.w	8000e70 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	4688      	mov	r8, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14b      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	d967      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0720 	rsb	r7, r2, #32
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bca:	4095      	lsls	r5, r2
 8000bcc:	ea47 0803 	orr.w	r8, r7, r3
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bdc:	fa1f fc85 	uxth.w	ip, r5
 8000be0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bf6:	f080 811b 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8118 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c00:	3f02      	subs	r7, #2
 8000c02:	442b      	add	r3, r5
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	f080 8107 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	f240 8104 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	442c      	add	r4, r5
 8000c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c34:	eba4 040c 	sub.w	r4, r4, ip
 8000c38:	2700      	movs	r7, #0
 8000c3a:	b11e      	cbz	r6, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c6 4300 	strd	r4, r3, [r6]
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xbe>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80eb 	beq.w	8000e2a <__udivmoddi4+0x286>
 8000c54:	2700      	movs	r7, #0
 8000c56:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f783 	clz	r7, r3
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d147      	bne.n	8000cfa <__udivmoddi4+0x156>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd0>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2c4>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000c82:	e9c6 4800 	strd	r4, r8, [r6]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xe8>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 808f 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c96:	1b49      	subs	r1, r1, r5
 8000c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9c:	fa1f f885 	uxth.w	r8, r5
 8000ca0:	2701      	movs	r7, #1
 8000ca2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ca6:	0c23      	lsrs	r3, r4, #16
 8000ca8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1a59      	subs	r1, r3, r1
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x14c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x14a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80b6 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e79f      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cfe:	40bb      	lsls	r3, r7
 8000d00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d08:	fa01 f407 	lsl.w	r4, r1, r7
 8000d0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d18:	4325      	orrs	r5, r4
 8000d1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d1e:	0c2c      	lsrs	r4, r5, #16
 8000d20:	fb08 3319 	mls	r3, r8, r9, r3
 8000d24:	fa1f fa8e 	uxth.w	sl, lr
 8000d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d30:	429c      	cmp	r4, r3
 8000d32:	fa02 f207 	lsl.w	r2, r2, r7
 8000d36:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d44:	f080 8087 	bcs.w	8000e56 <__udivmoddi4+0x2b2>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f240 8084 	bls.w	8000e56 <__udivmoddi4+0x2b2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4473      	add	r3, lr
 8000d54:	1b1b      	subs	r3, r3, r4
 8000d56:	b2ad      	uxth	r5, r5
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d74:	d26b      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000d76:	45a2      	cmp	sl, r4
 8000d78:	d969      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4474      	add	r4, lr
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c2      	mov	sl, r8
 8000d8e:	464b      	mov	r3, r9
 8000d90:	d354      	bcc.n	8000e3c <__udivmoddi4+0x298>
 8000d92:	d051      	beq.n	8000e38 <__udivmoddi4+0x294>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d069      	beq.n	8000e6c <__udivmoddi4+0x2c8>
 8000d98:	ebb1 050a 	subs.w	r5, r1, sl
 8000d9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000da0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da4:	40fd      	lsrs	r5, r7
 8000da6:	40fc      	lsrs	r4, r7
 8000da8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dac:	e9c6 5400 	strd	r5, r4, [r6]
 8000db0:	2700      	movs	r7, #0
 8000db2:	e747      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dca:	4338      	orrs	r0, r7
 8000dcc:	0c01      	lsrs	r1, r0, #16
 8000dce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd2:	fa1f f885 	uxth.w	r8, r5
 8000dd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb07 f308 	mul.w	r3, r7, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x256>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df0:	d22f      	bcs.n	8000e52 <__udivmoddi4+0x2ae>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d92d      	bls.n	8000e52 <__udivmoddi4+0x2ae>
 8000df6:	3f02      	subs	r7, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb00 f308 	mul.w	r3, r0, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x27e>
 8000e12:	1869      	adds	r1, r5, r1
 8000e14:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e18:	d217      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d915      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4429      	add	r1, r5
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e28:	e73b      	b.n	8000ca2 <__udivmoddi4+0xfe>
 8000e2a:	4637      	mov	r7, r6
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e709      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e30:	4607      	mov	r7, r0
 8000e32:	e6e7      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fb      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e38:	4541      	cmp	r1, r8
 8000e3a:	d2ab      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e40:	eb69 020e 	sbc.w	r2, r9, lr
 8000e44:	3801      	subs	r0, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	e7a4      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	e7e9      	b.n	8000e22 <__udivmoddi4+0x27e>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	e795      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e52:	4667      	mov	r7, ip
 8000e54:	e7d1      	b.n	8000dfa <__udivmoddi4+0x256>
 8000e56:	4681      	mov	r9, r0
 8000e58:	e77c      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	442c      	add	r4, r5
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0x14c>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	442b      	add	r3, r5
 8000e66:	e72f      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e68:	4638      	mov	r0, r7
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xda>
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0xa0>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <main>:
// This corresponds to 1 Hz
int timPeriod = 5000;
uint32_t masterARR = 0;

int main(void)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b08b      	sub	sp, #44	; 0x2c
 8000e7c:	af00      	add	r7, sp, #0

  HAL_Init();
 8000e7e:	f000 ff5c 	bl	8001d3a <HAL_Init>

  SystemClock_Config();
 8000e82:	f000 fabd 	bl	8001400 <SystemClock_Config>

  MX_GPIO_Init();
 8000e86:	f000 fbaf 	bl	80015e8 <MX_GPIO_Init>
  MX_TIM16_Init();
 8000e8a:	f000 fb31 	bl	80014f0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000e8e:	f000 fb55 	bl	800153c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000e92:	f000 fb79 	bl	8001588 <MX_USART1_UART_Init>

  HAL_TIM_Base_Start(&htim16);
 8000e96:	4896      	ldr	r0, [pc, #600]	; (80010f0 <main+0x278>)
 8000e98:	f002 fe10 	bl	8003abc <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE );
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <main+0x278>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	4b93      	ldr	r3, [pc, #588]	; (80010f0 <main+0x278>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]

  // The x-increment value
  float baseNum = 0.01;
 8000eac:	4b91      	ldr	r3, [pc, #580]	; (80010f4 <main+0x27c>)
 8000eae:	61fb      	str	r3, [r7, #28]

  // Create the x-array
  //
  // This is also used for the saw-tooth wave
  for (int i = 0 ; i<100; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	e011      	b.n	8000eda <main+0x62>

  	  xArray[i] = i*baseNum;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec8:	4a8b      	ldr	r2, [pc, #556]	; (80010f8 <main+0x280>)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0 ; i<100; i++) {
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	2b63      	cmp	r3, #99	; 0x63
 8000ede:	ddea      	ble.n	8000eb6 <main+0x3e>
  }

  // Pre-compute sine, and store the results
  // in the array, these values only change amplitude
  //
  for (int i = 0 ; i<100; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
 8000ee4:	e025      	b.n	8000f32 <main+0xba>

	  sinArray[i] = sin(6.3*xArray[i]);
 8000ee6:	4a84      	ldr	r2, [pc, #528]	; (80010f8 <main+0x280>)
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fad5 	bl	80004a0 <__aeabi_f2d>
 8000ef6:	a37c      	add	r3, pc, #496	; (adr r3, 80010e8 <main+0x270>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fb28 	bl	8000550 <__aeabi_dmul>
 8000f00:	4603      	mov	r3, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	ec44 3b17 	vmov	d7, r3, r4
 8000f08:	eeb0 0a47 	vmov.f32	s0, s14
 8000f0c:	eef0 0a67 	vmov.f32	s1, s15
 8000f10:	f003 feba 	bl	8004c88 <sin>
 8000f14:	ec54 3b10 	vmov	r3, r4, d0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	f7ff fdda 	bl	8000ad4 <__aeabi_d2f>
 8000f20:	4601      	mov	r1, r0
 8000f22:	4a76      	ldr	r2, [pc, #472]	; (80010fc <main+0x284>)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	6019      	str	r1, [r3, #0]
  for (int i = 0 ; i<100; i++) {
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	623b      	str	r3, [r7, #32]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b63      	cmp	r3, #99	; 0x63
 8000f36:	ddd6      	ble.n	8000ee6 <main+0x6e>

  while (1)
  {

	  // Choice storage
	  char waveSel[2] = {0};
 8000f38:	2300      	movs	r3, #0
 8000f3a:	833b      	strh	r3, [r7, #24]
	  char ampSel[2] = {0};
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	82bb      	strh	r3, [r7, #20]
	  char freqSel[2] = {0};
 8000f40:	2300      	movs	r3, #0
 8000f42:	823b      	strh	r3, [r7, #16]
	  char dutySel[2] = {0};
 8000f44:	2300      	movs	r3, #0
 8000f46:	81bb      	strh	r3, [r7, #12]

	  char choice[2] = {0};
 8000f48:	2300      	movs	r3, #0
 8000f4a:	813b      	strh	r3, [r7, #8]

	  serialPrint(" \n\r");
 8000f4c:	486c      	ldr	r0, [pc, #432]	; (8001100 <main+0x288>)
 8000f4e:	f000 fa41 	bl	80013d4 <serialPrint>

	  serialPrint("Select an option: A) Sine B) Sawtooth C) Square : ");
 8000f52:	486c      	ldr	r0, [pc, #432]	; (8001104 <main+0x28c>)
 8000f54:	f000 fa3e 	bl	80013d4 <serialPrint>
	  while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*)waveSel , 1, HAL_MAX_DELAY));
 8000f58:	bf00      	nop
 8000f5a:	f107 0118 	add.w	r1, r7, #24
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	2201      	movs	r2, #1
 8000f64:	4868      	ldr	r0, [pc, #416]	; (8001108 <main+0x290>)
 8000f66:	f003 f8f2 	bl	800414e <HAL_UART_Receive>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f4      	bne.n	8000f5a <main+0xe2>
	  serialPrint(waveSel);
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fa2d 	bl	80013d4 <serialPrint>
	  serialPrint("  \n\r");
 8000f7a:	4864      	ldr	r0, [pc, #400]	; (800110c <main+0x294>)
 8000f7c:	f000 fa2a 	bl	80013d4 <serialPrint>

	  serialPrint("Enter an amplitude: ");
 8000f80:	4863      	ldr	r0, [pc, #396]	; (8001110 <main+0x298>)
 8000f82:	f000 fa27 	bl	80013d4 <serialPrint>
	  while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*)ampSel , 1, HAL_MAX_DELAY));
 8000f86:	bf00      	nop
 8000f88:	f107 0114 	add.w	r1, r7, #20
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	2201      	movs	r2, #1
 8000f92:	485d      	ldr	r0, [pc, #372]	; (8001108 <main+0x290>)
 8000f94:	f003 f8db 	bl	800414e <HAL_UART_Receive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f4      	bne.n	8000f88 <main+0x110>
	  serialPrint(ampSel);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fa16 	bl	80013d4 <serialPrint>
	  serialPrint("  \n\r");
 8000fa8:	4858      	ldr	r0, [pc, #352]	; (800110c <main+0x294>)
 8000faa:	f000 fa13 	bl	80013d4 <serialPrint>

	  serialPrint("Enter a frequency (in Hz): ");
 8000fae:	4859      	ldr	r0, [pc, #356]	; (8001114 <main+0x29c>)
 8000fb0:	f000 fa10 	bl	80013d4 <serialPrint>
	  while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*)freqSel , 1, HAL_MAX_DELAY));
 8000fb4:	bf00      	nop
 8000fb6:	f107 0110 	add.w	r1, r7, #16
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4851      	ldr	r0, [pc, #324]	; (8001108 <main+0x290>)
 8000fc2:	f003 f8c4 	bl	800414e <HAL_UART_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f4      	bne.n	8000fb6 <main+0x13e>
	  serialPrint(freqSel);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f9ff 	bl	80013d4 <serialPrint>
	  serialPrint(" Hz");
 8000fd6:	4850      	ldr	r0, [pc, #320]	; (8001118 <main+0x2a0>)
 8000fd8:	f000 f9fc 	bl	80013d4 <serialPrint>
	  serialPrint("  \n\r");
 8000fdc:	484b      	ldr	r0, [pc, #300]	; (800110c <main+0x294>)
 8000fde:	f000 f9f9 	bl	80013d4 <serialPrint>

	  if (waveSel[0] == 67) {
 8000fe2:	7e3b      	ldrb	r3, [r7, #24]
 8000fe4:	2b43      	cmp	r3, #67	; 0x43
 8000fe6:	d11e      	bne.n	8001026 <main+0x1ae>

		  serialPrint("Enter a duty cycle: ");
 8000fe8:	484c      	ldr	r0, [pc, #304]	; (800111c <main+0x2a4>)
 8000fea:	f000 f9f3 	bl	80013d4 <serialPrint>
		  while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*)dutySel , 2, HAL_MAX_DELAY));
 8000fee:	bf00      	nop
 8000ff0:	f107 010c 	add.w	r1, r7, #12
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	4843      	ldr	r0, [pc, #268]	; (8001108 <main+0x290>)
 8000ffc:	f003 f8a7 	bl	800414e <HAL_UART_Receive>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f4      	bne.n	8000ff0 <main+0x178>
		  char tempS[2] = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	80bb      	strh	r3, [r7, #4]
		  tempS[0] = dutySel[0];
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	713b      	strb	r3, [r7, #4]
		  tempS[1] = dutySel[1];
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	717b      	strb	r3, [r7, #5]
		  serialPrint(tempS);
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f9dd 	bl	80013d4 <serialPrint>
		  serialPrint("%");
 800101a:	4841      	ldr	r0, [pc, #260]	; (8001120 <main+0x2a8>)
 800101c:	f000 f9da 	bl	80013d4 <serialPrint>
		  serialPrint("  \n\r");
 8001020:	483a      	ldr	r0, [pc, #232]	; (800110c <main+0x294>)
 8001022:	f000 f9d7 	bl	80013d4 <serialPrint>

	  }

	  serialPrint("Confirm selection? (y/n): ");
 8001026:	483f      	ldr	r0, [pc, #252]	; (8001124 <main+0x2ac>)
 8001028:	f000 f9d4 	bl	80013d4 <serialPrint>

	  while(HAL_OK != HAL_UART_Receive(&huart1, (uint8_t*)choice , 1, HAL_MAX_DELAY));
 800102c:	bf00      	nop
 800102e:	f107 0108 	add.w	r1, r7, #8
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2201      	movs	r2, #1
 8001038:	4833      	ldr	r0, [pc, #204]	; (8001108 <main+0x290>)
 800103a:	f003 f888 	bl	800414e <HAL_UART_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f4      	bne.n	800102e <main+0x1b6>
	  serialPrint(choice);
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f9c3 	bl	80013d4 <serialPrint>
	  serialPrint("  \n\r");
 800104e:	482f      	ldr	r0, [pc, #188]	; (800110c <main+0x294>)
 8001050:	f000 f9c0 	bl	80013d4 <serialPrint>

	  // Yes, confirm an start wave generation
	  if (choice[0] == 121) {
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	2b79      	cmp	r3, #121	; 0x79
 8001058:	f47f af6e 	bne.w	8000f38 <main+0xc0>

		  sinScale = sawScale = squareScale = atoi(ampSel);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fd2d 	bl	8004ac0 <atoi>
 8001066:	4602      	mov	r2, r0
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <main+0x2b0>)
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <main+0x2b0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2e      	ldr	r2, [pc, #184]	; (800112c <main+0x2b4>)
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <main+0x2b4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <main+0x2b8>)
 800107a:	6013      	str	r3, [r2, #0]
		  freq = atoi(freqSel);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fd1d 	bl	8004ac0 <atoi>
 8001086:	4602      	mov	r2, r0
 8001088:	4b2a      	ldr	r3, [pc, #168]	; (8001134 <main+0x2bc>)
 800108a:	601a      	str	r2, [r3, #0]

		  if (waveSel[0] == 65) {
 800108c:	7e3b      	ldrb	r3, [r7, #24]
 800108e:	2b41      	cmp	r3, #65	; 0x41
 8001090:	d105      	bne.n	800109e <main+0x226>

			  sinInit();
 8001092:	f000 f8c1 	bl	8001218 <sinInit>
			  sigNum = 0;
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <main+0x2c0>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e74c      	b.n	8000f38 <main+0xc0>

		  }

		  else if (waveSel[0] == 66) {
 800109e:	7e3b      	ldrb	r3, [r7, #24]
 80010a0:	2b42      	cmp	r3, #66	; 0x42
 80010a2:	d105      	bne.n	80010b0 <main+0x238>

			  sinInit();
 80010a4:	f000 f8b8 	bl	8001218 <sinInit>
			  sigNum = 1;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <main+0x2c0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e743      	b.n	8000f38 <main+0xc0>

		  }

		  else if (waveSel[0] == 67) {
 80010b0:	7e3b      	ldrb	r3, [r7, #24]
 80010b2:	2b43      	cmp	r3, #67	; 0x43
 80010b4:	d111      	bne.n	80010da <main+0x262>

			  dutyCycle = (float)atoi(dutySel);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fd00 	bl	8004ac0 <atoi>
 80010c0:	ee07 0a90 	vmov	s15, r0
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <main+0x2c4>)
 80010ca:	edc3 7a00 	vstr	s15, [r3]

			  squareInit();
 80010ce:	f000 f863 	bl	8001198 <squareInit>
			  sigNum = 2;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <main+0x2c0>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e72e      	b.n	8000f38 <main+0xc0>

		  }

		  else {

			  sigNum = -1;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <main+0x2c0>)
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	601a      	str	r2, [r3, #0]
  {
 80010e2:	e729      	b.n	8000f38 <main+0xc0>
 80010e4:	f3af 8000 	nop.w
 80010e8:	33333333 	.word	0x33333333
 80010ec:	40193333 	.word	0x40193333
 80010f0:	20000618 	.word	0x20000618
 80010f4:	3c23d70a 	.word	0x3c23d70a
 80010f8:	200003b0 	.word	0x200003b0
 80010fc:	20000220 	.word	0x20000220
 8001100:	08005cc8 	.word	0x08005cc8
 8001104:	08005ccc 	.word	0x08005ccc
 8001108:	20000594 	.word	0x20000594
 800110c:	08005d00 	.word	0x08005d00
 8001110:	08005d08 	.word	0x08005d08
 8001114:	08005d20 	.word	0x08005d20
 8001118:	08005d3c 	.word	0x08005d3c
 800111c:	08005d40 	.word	0x08005d40
 8001120:	08005d58 	.word	0x08005d58
 8001124:	08005d5c 	.word	0x08005d5c
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004
 8001134:	20000014 	.word	0x20000014
 8001138:	20000000 	.word	0x20000000
 800113c:	20000018 	.word	0x20000018

08001140 <HAL_TIM_PeriodElapsedCallback>:

}

// Timer done interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  // Make sure that this is the timer16 interrupt
  if (htim == &htim16 )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d118      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x42>
  {

	  if (sigNum == 0) {
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x1e>

		  generateSin();
 8001158:	f000 f8b4 	bl	80012c4 <generateSin>
		  signalOutput = 0;

	  }

  }
}
 800115c:	e011      	b.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x42>
	  else if (sigNum == 1) {
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x2c>
		  generateSaw();
 8001166:	f000 f87f 	bl	8001268 <generateSaw>
}
 800116a:	e00a      	b.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x42>
	  else if (sigNum == 2) {
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d102      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x3a>
		  generateSquare();
 8001174:	f000 f8d4 	bl	8001320 <generateSquare>
}
 8001178:	e003      	b.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x42>
		  signalOutput = 0;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000618 	.word	0x20000618
 8001190:	20000000 	.word	0x20000000
 8001194:	20000664 	.word	0x20000664

08001198 <squareInit>:

void squareInit(void) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0

	// Adjust the frequency to match the entered value

	float per = timPeriod/freq-1;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <squareInit+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <squareInit+0x68>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011aa:	3b01      	subs	r3, #1
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	edc7 7a01 	vstr	s15, [r7, #4]

	TIM16->ARR = (uint32_t)per;
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <squareInit+0x6c>)
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c2:	ee17 2a90 	vmov	r2, s15
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c

	masterARR = (uint32_t)(per*2);
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d4:	ee17 2a90 	vmov	r2, s15
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <squareInit+0x70>)
 80011da:	601a      	str	r2, [r3, #0]

	duty = dutyCycle/100;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <squareInit+0x74>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001210 <squareInit+0x78>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <squareInit+0x7c>)
 80011ec:	edc3 7a00 	vstr	s15, [r3]

}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	2000001c 	.word	0x2000001c
 8001200:	20000014 	.word	0x20000014
 8001204:	40014400 	.word	0x40014400
 8001208:	20000540 	.word	0x20000540
 800120c:	20000018 	.word	0x20000018
 8001210:	42c80000 	.word	0x42c80000
 8001214:	20000614 	.word	0x20000614

08001218 <sinInit>:

void sinInit(void) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0

	// Just adjust the timer interrupt for
	// printing the sine values, they are just
	// printer further or closer together
	float sinARR = 0;
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	607b      	str	r3, [r7, #4]

	sinARR = ((baseSinFreq+1)/freq)-1;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <sinInit+0x44>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <sinInit+0x48>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001232:	3b01      	subs	r3, #1
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]

	TIM16->ARR = (uint32_t)sinARR;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <sinInit+0x4c>)
 8001242:	edd7 7a01 	vldr	s15, [r7, #4]
 8001246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124a:	ee17 2a90 	vmov	r2, s15
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000010 	.word	0x20000010
 8001260:	20000014 	.word	0x20000014
 8001264:	40014400 	.word	0x40014400

08001268 <generateSaw>:

void generateSaw(void) {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

	if (sawCount == 100) {
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <generateSaw+0x4c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d102      	bne.n	800127a <generateSaw+0x12>

		sawCount = 0;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <generateSaw+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

	}

	// Reads straight from the array of 100 values from 0->100
	// in 0.01 increments
	signalOutput = sawScale*xArray[sawCount];
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <generateSaw+0x50>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <generateSaw+0x4c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <generateSaw+0x54>)
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <generateSaw+0x58>)
 800129a:	edc3 7a00 	vstr	s15, [r3]

	sawCount++;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <generateSaw+0x4c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a03      	ldr	r2, [pc, #12]	; (80012b4 <generateSaw+0x4c>)
 80012a6:	6013      	str	r3, [r2, #0]

}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000021c 	.word	0x2000021c
 80012b8:	20000008 	.word	0x20000008
 80012bc:	200003b0 	.word	0x200003b0
 80012c0:	20000664 	.word	0x20000664

080012c4 <generateSin>:

void generateSin(void) {
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

	if (sinCount == 100) {
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <generateSin+0x4c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d102      	bne.n	80012d6 <generateSin+0x12>

		sinCount = 0;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <generateSin+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

	}

	// Reads from the sine array, which has been pre-computed to save cpu time
	signalOutput = sinScale*sinArray[sinCount];
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <generateSin+0x50>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <generateSin+0x4c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <generateSin+0x54>)
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <generateSin+0x58>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]

	sinCount++;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <generateSin+0x4c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <generateSin+0x4c>)
 8001302:	6013      	str	r3, [r2, #0]

}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000218 	.word	0x20000218
 8001314:	20000004 	.word	0x20000004
 8001318:	20000220 	.word	0x20000220
 800131c:	20000664 	.word	0x20000664

08001320 <generateSquare>:

void generateSquare(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

	// Toggles the output
	if (signalOutput == 0) {
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <generateSquare+0xa0>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d104      	bne.n	800133e <generateSquare+0x1e>

		signalOutput = 1;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <generateSquare+0xa0>)
 8001336:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e00d      	b.n	800135a <generateSquare+0x3a>

	}

	else if (signalOutput >= 1) {
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <generateSquare+0xa0>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	db03      	blt.n	800135a <generateSquare+0x3a>

		signalOutput = 0;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <generateSquare+0xa0>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

	}

	// Scales the output based on the amplitude requirement
	signalOutput = signalOutput*squareScale;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <generateSquare+0xa4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <generateSquare+0xa0>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <generateSquare+0xa0>)
 8001372:	edc3 7a00 	vstr	s15, [r3]

	// This is actually pretty cool, it adjusts the
	// ARR value based on the duty cycle along with 1,
	// this way it always ensures that the whole frequency is obeyed
	duty = 1-duty;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <generateSquare+0xa8>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001384:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <generateSquare+0xa8>)
 8001386:	edc3 7a00 	vstr	s15, [r3]
	TIM16->ARR = (uint32_t)((duty)*(masterARR+1)-1);
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <generateSquare+0xac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <generateSquare+0xa8>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <generateSquare+0xb0>)
 80013ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b0:	ee17 2a90 	vmov	r2, s15
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c

}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000664 	.word	0x20000664
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	20000614 	.word	0x20000614
 80013cc:	20000540 	.word	0x20000540
 80013d0:	40014400 	.word	0x40014400

080013d4 <serialPrint>:

// Just to avoid copy-pasting this awful string every time
void serialPrint(char buffer[]) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*)buffer , strlen(buffer), HAL_MAX_DELAY);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7fe fef3 	bl	80001c8 <strlen>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <serialPrint+0x28>)
 80013ee:	f002 fe1b 	bl	8004028 <HAL_UART_Transmit>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000594 	.word	0x20000594

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0b8      	sub	sp, #224	; 0xe0
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800140a:	2244      	movs	r2, #68	; 0x44
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fb7e 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2288      	movs	r2, #136	; 0x88
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fb70 	bl	8004b10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001430:	2310      	movs	r3, #16
 8001432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800144e:	2301      	movs	r3, #1
 8001450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800145a:	2328      	movs	r3, #40	; 0x28
 800145c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001460:	2307      	movs	r3, #7
 8001462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f82e 	bl	80024d8 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001482:	f000 fadd 	bl	8001a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014a8:	2104      	movs	r1, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fbfa 	bl	8002ca4 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80014b6:	f000 fac3 	bl	8001a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014be:	2300      	movs	r3, #0
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fdf1 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014d0:	f000 fab6 	bl	8001a40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014d8:	f000 ffa8 	bl	800242c <HAL_PWREx_ControlVoltageScaling>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014e2:	f000 faad 	bl	8001a40 <Error_Handler>
  }
}
 80014e6:	bf00      	nop
 80014e8:	37e0      	adds	r7, #224	; 0xe0
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_TIM16_Init+0x44>)
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <MX_TIM16_Init+0x48>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_TIM16_Init+0x44>)
 80014fc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001500:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_TIM16_Init+0x44>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_TIM16_Init+0x44>)
 800150a:	2231      	movs	r2, #49	; 0x31
 800150c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_TIM16_Init+0x44>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_TIM16_Init+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_TIM16_Init+0x44>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_TIM16_Init+0x44>)
 8001522:	f002 fa73 	bl	8003a0c <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800152c:	f000 fa88 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000618 	.word	0x20000618
 8001538:	40014400 	.word	0x40014400

0800153c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_TIM17_Init+0x44>)
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <MX_TIM17_Init+0x48>)
 8001544:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_TIM17_Init+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_TIM17_Init+0x44>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_TIM17_Init+0x44>)
 8001554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001558:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_TIM17_Init+0x44>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_TIM17_Init+0x44>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_TIM17_Init+0x44>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_TIM17_Init+0x44>)
 800156e:	f002 fa4d 	bl	8003a0c <HAL_TIM_Base_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001578:	f000 fa62 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000544 	.word	0x20000544
 8001584:	40014800 	.word	0x40014800

08001588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <MX_USART1_UART_Init+0x5c>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART1_UART_Init+0x58>)
 80015cc:	f002 fcde 	bl	8003f8c <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015d6:	f000 fa33 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000594 	.word	0x20000594
 80015e4:	40013800 	.word	0x40013800

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4bba      	ldr	r3, [pc, #744]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4ab9      	ldr	r2, [pc, #740]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4bb7      	ldr	r3, [pc, #732]	; (80018e8 <MX_GPIO_Init+0x300>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4bb4      	ldr	r3, [pc, #720]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4ab3      	ldr	r2, [pc, #716]	; (80018e8 <MX_GPIO_Init+0x300>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4bb1      	ldr	r3, [pc, #708]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4bae      	ldr	r3, [pc, #696]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4aad      	ldr	r2, [pc, #692]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4bab      	ldr	r3, [pc, #684]	; (80018e8 <MX_GPIO_Init+0x300>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4ba8      	ldr	r3, [pc, #672]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4aa7      	ldr	r2, [pc, #668]	; (80018e8 <MX_GPIO_Init+0x300>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4ba5      	ldr	r3, [pc, #660]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	4ba2      	ldr	r3, [pc, #648]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4aa1      	ldr	r2, [pc, #644]	; (80018e8 <MX_GPIO_Init+0x300>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <MX_GPIO_Init+0x300>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 718a 	mov.w	r1, #276	; 0x114
 800167c:	489b      	ldr	r0, [pc, #620]	; (80018ec <MX_GPIO_Init+0x304>)
 800167e:	f000 fe8b 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f248 1104 	movw	r1, #33028	; 0x8104
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f000 fe84 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001690:	2200      	movs	r2, #0
 8001692:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001696:	4896      	ldr	r0, [pc, #600]	; (80018f0 <MX_GPIO_Init+0x308>)
 8001698:	f000 fe7e 	bl	8002398 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f241 0181 	movw	r1, #4225	; 0x1081
 80016a2:	4894      	ldr	r0, [pc, #592]	; (80018f4 <MX_GPIO_Init+0x30c>)
 80016a4:	f000 fe78 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ae:	4891      	ldr	r0, [pc, #580]	; (80018f4 <MX_GPIO_Init+0x30c>)
 80016b0:	f000 fe72 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80016ba:	488f      	ldr	r0, [pc, #572]	; (80018f8 <MX_GPIO_Init+0x310>)
 80016bc:	f000 fe6c 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2120      	movs	r1, #32
 80016c4:	488a      	ldr	r0, [pc, #552]	; (80018f0 <MX_GPIO_Init+0x308>)
 80016c6:	f000 fe67 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2101      	movs	r1, #1
 80016ce:	4887      	ldr	r0, [pc, #540]	; (80018ec <MX_GPIO_Init+0x304>)
 80016d0:	f000 fe62 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016d4:	f240 1315 	movw	r3, #277	; 0x115
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	487f      	ldr	r0, [pc, #508]	; (80018ec <MX_GPIO_Init+0x304>)
 80016ee:	f000 fcab 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80016f2:	236a      	movs	r3, #106	; 0x6a
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <MX_GPIO_Init+0x314>)
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4879      	ldr	r0, [pc, #484]	; (80018ec <MX_GPIO_Init+0x304>)
 8001706:	f000 fc9f 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001710:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <MX_GPIO_Init+0x318>)
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4876      	ldr	r0, [pc, #472]	; (80018f8 <MX_GPIO_Init+0x310>)
 8001720:	f000 fc92 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001724:	233f      	movs	r3, #63	; 0x3f
 8001726:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001728:	230b      	movs	r3, #11
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4870      	ldr	r0, [pc, #448]	; (80018f8 <MX_GPIO_Init+0x310>)
 8001738:	f000 fc86 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800173c:	2303      	movs	r3, #3
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800174c:	2308      	movs	r3, #8
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f000 fc75 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800175e:	f248 1304 	movw	r3, #33028	; 0x8104
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f000 fc65 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800177e:	2308      	movs	r3, #8
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800178e:	2301      	movs	r3, #1
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f000 fc54 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80017a0:	2310      	movs	r3, #16
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017a4:	230b      	movs	r3, #11
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b6:	f000 fc47 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80017ba:	23e0      	movs	r3, #224	; 0xe0
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ca:	2305      	movs	r3, #5
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 fc36 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <MX_GPIO_Init+0x314>)
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4840      	ldr	r0, [pc, #256]	; (80018f0 <MX_GPIO_Init+0x308>)
 80017f0:	f000 fc2a 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017f8:	230b      	movs	r3, #11
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	483a      	ldr	r0, [pc, #232]	; (80018f0 <MX_GPIO_Init+0x308>)
 8001808:	f000 fc1e 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800180c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001810:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4832      	ldr	r0, [pc, #200]	; (80018f0 <MX_GPIO_Init+0x308>)
 8001826:	f000 fc0f 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800182a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800183c:	2306      	movs	r3, #6
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4829      	ldr	r0, [pc, #164]	; (80018ec <MX_GPIO_Init+0x304>)
 8001848:	f000 fbfe 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800184c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001850:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800185e:	230a      	movs	r3, #10
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4820      	ldr	r0, [pc, #128]	; (80018ec <MX_GPIO_Init+0x304>)
 800186a:	f000 fbed 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800186e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001880:	2304      	movs	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4819      	ldr	r0, [pc, #100]	; (80018f0 <MX_GPIO_Init+0x308>)
 800188c:	f000 fbdc 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <MX_GPIO_Init+0x30c>)
 80018ae:	f000 fbcb 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80018b2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80018b6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_GPIO_Init+0x314>)
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	480b      	ldr	r0, [pc, #44]	; (80018f4 <MX_GPIO_Init+0x30c>)
 80018c8:	f000 fbbe 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80018cc:	f243 0381 	movw	r3, #12417	; 0x3081
 80018d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	e00e      	b.n	8001904 <MX_GPIO_Init+0x31c>
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48001000 	.word	0x48001000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	48000800 	.word	0x48000800
 80018fc:	10110000 	.word	0x10110000
 8001900:	10210000 	.word	0x10210000
 8001904:	484a      	ldr	r0, [pc, #296]	; (8001a30 <MX_GPIO_Init+0x448>)
 8001906:	f000 fb9f 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800190a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4844      	ldr	r0, [pc, #272]	; (8001a34 <MX_GPIO_Init+0x44c>)
 8001924:	f000 fb90 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001928:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_GPIO_Init+0x450>)
 8001930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	483d      	ldr	r0, [pc, #244]	; (8001a34 <MX_GPIO_Init+0x44c>)
 800193e:	f000 fb83 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f000 fb75 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800195e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001970:	230a      	movs	r3, #10
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f000 fb63 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001982:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001994:	2306      	movs	r3, #6
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <MX_GPIO_Init+0x44c>)
 80019a0:	f000 fb52 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80019a4:	2302      	movs	r3, #2
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b4:	2305      	movs	r3, #5
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	481c      	ldr	r0, [pc, #112]	; (8001a30 <MX_GPIO_Init+0x448>)
 80019c0:	f000 fb42 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80019c4:	2378      	movs	r3, #120	; 0x78
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d4:	2307      	movs	r3, #7
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	4814      	ldr	r0, [pc, #80]	; (8001a30 <MX_GPIO_Init+0x448>)
 80019e0:	f000 fb32 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ea:	2312      	movs	r3, #18
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f6:	2304      	movs	r3, #4
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <MX_GPIO_Init+0x454>)
 8001a02:	f000 fb21 	bl	8002048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2017      	movs	r0, #23
 8001a0c:	f000 fae5 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a10:	2017      	movs	r0, #23
 8001a12:	f000 fafe 	bl	8002012 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2028      	movs	r0, #40	; 0x28
 8001a1c:	f000 fadd 	bl	8001fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a20:	2028      	movs	r0, #40	; 0x28
 8001a22:	f000 faf6 	bl	8002012 <HAL_NVIC_EnableIRQ>

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48000800 	.word	0x48000800
 8001a38:	10110000 	.word	0x10110000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_TIM_Base_MspInit+0x78>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d114      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2019      	movs	r0, #25
 8001ac8:	f000 fa87 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001acc:	2019      	movs	r0, #25
 8001ace:	f000 faa0 	bl	8002012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001ad2:	e018      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_TIM_Base_MspInit+0x80>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d113      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x7c>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201a      	movs	r0, #26
 8001afc:	f000 fa6d 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001b00:	201a      	movs	r0, #26
 8001b02:	f000 fa86 	bl	8002012 <HAL_NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40014400 	.word	0x40014400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40014800 	.word	0x40014800

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0x7c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d127      	bne.n	8001b8e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_UART_MspInit+0x80>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_UART_MspInit+0x84>)
 8001b8a:	f000 fa5d 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40013800 	.word	0x40013800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48000400 	.word	0x48000400

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 f8f4 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c04:	2020      	movs	r0, #32
 8001c06:	f000 fbdf 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c0a:	2040      	movs	r0, #64	; 0x40
 8001c0c:	f000 fbdc 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c10:	2080      	movs	r0, #128	; 0x80
 8001c12:	f000 fbd9 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c1a:	f000 fbd5 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c2a:	f001 ffaf 	bl	8003b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000618 	.word	0x20000618

08001c38 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c3e:	f001 ffa5 	bl	8003b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000544 	.word	0x20000544

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001c50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c54:	f000 fbb8 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c5c:	f000 fbb4 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c64:	f000 fbb0 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c6c:	f000 fbac 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c74:	f000 fba8 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <SystemInit+0x64>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <SystemInit+0x64>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <SystemInit+0x68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <SystemInit+0x68>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <SystemInit+0x68>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <SystemInit+0x68>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <SystemInit+0x68>)
 8001ca8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001cac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <SystemInit+0x68>)
 8001cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <SystemInit+0x68>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <SystemInit+0x68>)
 8001cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <SystemInit+0x68>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SystemInit+0x64>)
 8001cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cd2:	609a      	str	r2, [r3, #8]
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cec:	f7ff ffc6 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cf0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
	ldr	r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <LoopForever+0x16>)
	cmp	r2, r3
 8001d12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d16:	f002 fed7 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1a:	f7ff f8ad 	bl	8000e78 <main>

08001d1e <LoopForever>:

LoopForever:
    b LoopForever
 8001d1e:	e7fe      	b.n	8001d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d24:	080060b8 	.word	0x080060b8
	ldr	r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d2c:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8001d30:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8001d34:	2000066c 	.word	0x2000066c

08001d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_2_IRQHandler>

08001d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f93d 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f80e 	bl	8001d6c <HAL_InitTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	e001      	b.n	8001d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5c:	f7ff fe78 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_InitTick+0x70>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_InitTick+0x6c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f949 	bl	800202e <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d809      	bhi.n	8001dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f000 f913 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_InitTick+0x74>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e007      	b.n	8001dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e004      	b.n	8001dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	e001      	b.n	8001dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000028 	.word	0x20000028
 8001ddc:	20000020 	.word	0x20000020
 8001de0:	20000024 	.word	0x20000024

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000028 	.word	0x20000028
 8001e08:	20000668 	.word	0x20000668

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000668 	.word	0x20000668

08001e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e40:	4013      	ands	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <__NVIC_SetPriorityGrouping+0x44>)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	60d3      	str	r3, [r2, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <__NVIC_GetPriorityGrouping+0x18>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f003 0307 	and.w	r3, r3, #7
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	db0b      	blt.n	8001eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 021f 	and.w	r2, r3, #31
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <__NVIC_EnableIRQ+0x38>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff29 	bl	8001e24 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff3e 	bl	8001e6c <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff31 	bl	8001e88 <__NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa2 	bl	8001f80 <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e17f      	b.n	8002358 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8171 	beq.w	8002352 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d00b      	beq.n	8002090 <HAL_GPIO_Init+0x48>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	2b11      	cmp	r3, #17
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b12      	cmp	r3, #18
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d118      	bne.n	8002130 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x128>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b12      	cmp	r3, #18
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80ac 	beq.w	8002352 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_GPIO_Init+0x32c>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	4a5d      	ldr	r2, [pc, #372]	; (8002374 <HAL_GPIO_Init+0x32c>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6613      	str	r3, [r2, #96]	; 0x60
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_GPIO_Init+0x32c>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002212:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800223c:	d025      	beq.n	800228a <HAL_GPIO_Init+0x242>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4e      	ldr	r2, [pc, #312]	; (800237c <HAL_GPIO_Init+0x334>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <HAL_GPIO_Init+0x23e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_GPIO_Init+0x338>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x23a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x33c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x236>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <HAL_GPIO_Init+0x340>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x232>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4a      	ldr	r2, [pc, #296]	; (800238c <HAL_GPIO_Init+0x344>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x22e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a49      	ldr	r2, [pc, #292]	; (8002390 <HAL_GPIO_Init+0x348>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x22a>
 800226e:	2306      	movs	r3, #6
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002272:	2307      	movs	r3, #7
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x244>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x244>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x244>
 800228a:	2300      	movs	r3, #0
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800229c:	4936      	ldr	r1, [pc, #216]	; (8002378 <HAL_GPIO_Init+0x330>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_GPIO_Init+0x34c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ce:	4a31      	ldr	r2, [pc, #196]	; (8002394 <HAL_GPIO_Init+0x34c>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <HAL_GPIO_Init+0x34c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_GPIO_Init+0x34c>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022fe:	4b25      	ldr	r3, [pc, #148]	; (8002394 <HAL_GPIO_Init+0x34c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_GPIO_Init+0x34c>)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_GPIO_Init+0x34c>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_GPIO_Init+0x34c>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	f47f ae78 	bne.w	8002058 <HAL_GPIO_Init+0x10>
  }
}
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40021000 	.word	0x40021000
 8002378:	40010000 	.word	0x40010000
 800237c:	48000400 	.word	0x48000400
 8002380:	48000800 	.word	0x48000800
 8002384:	48000c00 	.word	0x48000c00
 8002388:	48001000 	.word	0x48001000
 800238c:	48001400 	.word	0x48001400
 8002390:	48001800 	.word	0x48001800
 8002394:	40010400 	.word	0x40010400

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f806 	bl	80023f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40010400 	.word	0x40010400

080023f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <HAL_PWREx_GetVoltageRange+0x18>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243a:	d130      	bne.n	800249e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	d038      	beq.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002452:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2232      	movs	r2, #50	; 0x32
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9b      	lsrs	r3, r3, #18
 800246c:	3301      	adds	r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002470:	e002      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b01      	subs	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	d102      	bne.n	800248c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f2      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d110      	bne.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e00f      	b.n	80024be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024aa:	d007      	beq.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b4:	4a05      	ldr	r2, [pc, #20]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40007000 	.word	0x40007000
 80024d0:	20000020 	.word	0x20000020
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e3d4      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ea:	4ba1      	ldr	r3, [pc, #644]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f4:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80e4 	beq.w	80026d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_RCC_OscConfig+0x4a>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	f040 808b 	bne.w	8002630 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b01      	cmp	r3, #1
 800251e:	f040 8087 	bne.w	8002630 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002522:	4b93      	ldr	r3, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e3ac      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_RCC_OscConfig+0x7c>
 800254a:	4b89      	ldr	r3, [pc, #548]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002552:	e005      	b.n	8002560 <HAL_RCC_OscConfig+0x88>
 8002554:	4b86      	ldr	r3, [pc, #536]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002560:	4293      	cmp	r3, r2
 8002562:	d223      	bcs.n	80025ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fd3f 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e38d      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002578:	4b7d      	ldr	r3, [pc, #500]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a7c      	ldr	r2, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b7a      	ldr	r3, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4977      	ldr	r1, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	4972      	ldr	r1, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
 80025aa:	e025      	b.n	80025f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ac:	4b70      	ldr	r3, [pc, #448]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6f      	ldr	r2, [pc, #444]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	496a      	ldr	r1, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b69      	ldr	r3, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fcff 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e34d      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f8:	f000 fc36 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80025fc:	4601      	mov	r1, r0
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_RCC_OscConfig+0x29c>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa21 f303 	lsr.w	r3, r1, r3
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x2a0>)
 8002616:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002618:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_RCC_OscConfig+0x2a4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fba5 	bl	8001d6c <HAL_InitTick>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d052      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	e331      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d032      	beq.n	800269e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002638:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002644:	f7ff fbe2 	bl	8001e0c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800264c:	f7ff fbde 	bl	8001e0c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e31a      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265e:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a40      	ldr	r2, [pc, #256]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	493b      	ldr	r1, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
 800269c:	e01a      	b.n	80026d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026aa:	f7ff fbaf 	bl	8001e0c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b2:	f7ff fbab 	bl	8001e0c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e2e7      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x1da>
 80026d0:	e000      	b.n	80026d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d074      	beq.n	80027ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x21a>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d10e      	bne.n	800270a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d10b      	bne.n	800270a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d064      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d160      	bne.n	80027c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e2c4      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x24a>
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e01d      	b.n	800275e <HAL_RCC_OscConfig+0x286>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x26e>
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x286>
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a06      	ldr	r2, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x298>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7ff fb51 	bl	8001e0c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276c:	e011      	b.n	8002792 <HAL_RCC_OscConfig+0x2ba>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	08005d78 	.word	0x08005d78
 8002778:	20000020 	.word	0x20000020
 800277c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7ff fb44 	bl	8001e0c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e280      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002792:	4baf      	ldr	r3, [pc, #700]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x2a8>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff fb34 	bl	8001e0c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff fb30 	bl	8001e0c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e26c      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ba:	4ba5      	ldr	r3, [pc, #660]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2d0>
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d060      	beq.n	8002898 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_OscConfig+0x310>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d119      	bne.n	8002816 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d116      	bne.n	8002816 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	4b99      	ldr	r3, [pc, #612]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x328>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e249      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4990      	ldr	r1, [pc, #576]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002814:	e040      	b.n	8002898 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d023      	beq.n	8002866 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281e:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a8b      	ldr	r2, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff faef 	bl	8001e0c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff faeb 	bl	8001e0c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e227      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002844:	4b82      	ldr	r3, [pc, #520]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	497c      	ldr	r1, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
 8002864:	e018      	b.n	8002898 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a79      	ldr	r2, [pc, #484]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 800286c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7ff facb 	bl	8001e0c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287a:	f7ff fac7 	bl	8001e0c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e203      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d03c      	beq.n	800291e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b2:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7ff faa6 	bl	8001e0c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7ff faa2 	bl	8001e0c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1de      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d6:	4b5e      	ldr	r3, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80028d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <HAL_RCC_OscConfig+0x3ec>
 80028e4:	e01b      	b.n	800291e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e6:	4b5a      	ldr	r3, [pc, #360]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80028e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7ff fa89 	bl	8001e0c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fe:	f7ff fa85 	bl	8001e0c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1c1      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002910:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ef      	bne.n	80028fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80a6 	beq.w	8002a78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002930:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a43      	ldr	r2, [pc, #268]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002954:	2301      	movs	r3, #1
 8002956:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_RCC_OscConfig+0x57c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d118      	bne.n	8002996 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x57c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a3a      	ldr	r2, [pc, #232]	; (8002a54 <HAL_RCC_OscConfig+0x57c>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002970:	f7ff fa4c 	bl	8001e0c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7ff fa48 	bl	8001e0c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e184      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCC_OscConfig+0x57c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4d8>
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ae:	e024      	b.n	80029fa <HAL_RCC_OscConfig+0x522>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d110      	bne.n	80029da <HAL_RCC_OscConfig+0x502>
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d8:	e00f      	b.n	80029fa <HAL_RCC_OscConfig+0x522>
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ea:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7ff fa03 	bl	8001e0c <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7ff f9ff 	bl	8001e0c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e139      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ed      	beq.n	8002a0a <HAL_RCC_OscConfig+0x532>
 8002a2e:	e01a      	b.n	8002a66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7ff f9ec 	bl	8001e0c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a36:	e00f      	b.n	8002a58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7ff f9e8 	bl	8001e0c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d906      	bls.n	8002a58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e122      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a58:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e8      	bne.n	8002a38 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	4a8a      	ldr	r2, [pc, #552]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8108 	beq.w	8002c92 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	f040 80d0 	bne.w	8002c2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a8c:	4b83      	ldr	r3, [pc, #524]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d130      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d127      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11f      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002acc:	2a07      	cmp	r2, #7
 8002ace:	bf14      	ite	ne
 8002ad0:	2201      	movne	r2, #1
 8002ad2:	2200      	moveq	r2, #0
 8002ad4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d113      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d06e      	beq.n	8002be0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d069      	beq.n	8002bdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b08:	4b64      	ldr	r3, [pc, #400]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b14:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b7      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b24:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5c      	ldr	r2, [pc, #368]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b30:	f7ff f96c 	bl	8001e0c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7ff f968 	bl	8001e0c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0a4      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b56:	4b51      	ldr	r3, [pc, #324]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCC_OscConfig+0x7c8>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b66:	3a01      	subs	r2, #1
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b70:	0212      	lsls	r2, r2, #8
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b78:	0852      	lsrs	r2, r2, #1
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	0552      	lsls	r2, r2, #21
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b84:	0852      	lsrs	r2, r2, #1
 8002b86:	3a01      	subs	r2, #1
 8002b88:	0652      	lsls	r2, r2, #25
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b90:	0912      	lsrs	r2, r2, #4
 8002b92:	0452      	lsls	r2, r2, #17
 8002b94:	430a      	orrs	r2, r1
 8002b96:	4941      	ldr	r1, [pc, #260]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3e      	ldr	r2, [pc, #248]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb4:	f7ff f92a 	bl	8001e0c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7ff f926 	bl	8001e0c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e062      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bda:	e05a      	b.n	8002c92 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e059      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be0:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d152      	bne.n	8002c92 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c04:	f7ff f902 	bl	8001e0c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7ff f8fe 	bl	8001e0c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e03a      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x734>
 8002c2a:	e032      	b.n	8002c92 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d02d      	beq.n	8002c8e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f8d1 	bl	8001e0c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff f8cd 	bl	8001e0c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e009      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_OscConfig+0x7c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x796>
 8002c8c:	e001      	b.n	8002c92 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	f99d808c 	.word	0xf99d808c

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0c8      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d910      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 0207 	bic.w	r2, r3, #7
 8002cce:	4961      	ldr	r1, [pc, #388]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b0      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d04c      	beq.n	8002d8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfc:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d121      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e09e      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e092      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2c:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e086      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3c:	4b46      	ldr	r3, [pc, #280]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e07e      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d4c:	4b42      	ldr	r3, [pc, #264]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 0203 	bic.w	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	493f      	ldr	r1, [pc, #252]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5e:	f7ff f855 	bl	8001e0c <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7ff f851 	bl	8001e0c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e066      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 020c 	and.w	r2, r3, #12
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d1eb      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	492c      	ldr	r1, [pc, #176]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d210      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4924      	ldr	r1, [pc, #144]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_ClockConfig+0x1b0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e036      	b.n	8002e4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4918      	ldr	r1, [pc, #96]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4910      	ldr	r1, [pc, #64]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e1a:	f000 f825 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4601      	mov	r1, r0
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_RCC_ClockConfig+0x1b4>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	5cd3      	ldrb	r3, [r2, r3]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	fa21 f303 	lsr.w	r3, r1, r3
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe ff94 	bl	8001d6c <HAL_InitTick>
 8002e44:	4603      	mov	r3, r0
 8002e46:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e48:	7afb      	ldrb	r3, [r7, #11]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40022000 	.word	0x40022000
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08005d78 	.word	0x08005d78
 8002e60:	20000020 	.word	0x20000020
 8002e64:	20000024 	.word	0x20000024

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x34>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d121      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d11e      	bne.n	8002eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e9c:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb8:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e004      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d133      	bne.n	8002f5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d002      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0xa4>
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0xaa>
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0e:	617b      	str	r3, [r7, #20]
      break;
 8002f10:	e005      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	617b      	str	r3, [r7, #20]
      break;
 8002f1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	3301      	adds	r3, #1
 8002f2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	fb02 f203 	mul.w	r2, r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x104>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0e5b      	lsrs	r3, r3, #25
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3724      	adds	r7, #36	; 0x24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08005d90 	.word	0x08005d90
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000020 	.word	0x20000020

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08005d88 	.word	0x08005d88

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc4:	f7ff ffda 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc8:	4601      	mov	r1, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0adb      	lsrs	r3, r3, #11
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08005d88 	.word	0x08005d88

08002fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003004:	f7ff fa04 	bl	8002410 <HAL_PWREx_GetVoltageRange>
 8003008:	6178      	str	r0, [r7, #20]
 800300a:	e014      	b.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003024:	f7ff f9f4 	bl	8002410 <HAL_PWREx_GetVoltageRange>
 8003028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d10b      	bne.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d919      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2ba0      	cmp	r3, #160	; 0xa0
 8003048:	d902      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304a:	2302      	movs	r3, #2
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e013      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e010      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d902      	bls.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800305c:	2303      	movs	r3, #3
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e00a      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d102      	bne.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e004      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d101      	bne.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40022000 	.word	0x40022000

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03f      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d0:	d01c      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x60>
 80030d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d6:	d802      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80030dc:	e01f      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80030de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e2:	d003      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80030e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e8:	d01c      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80030ea:	e018      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030ec:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a84      	ldr	r2, [pc, #528]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f8:	e015      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fab9 	bl	8003678 <RCCEx_PLLSAI1_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310a:	e00c      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3320      	adds	r3, #32
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fba0 	bl	8003858 <RCCEx_PLLSAI2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311c:	e003      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	74fb      	strb	r3, [r7, #19]
      break;
 8003122:	e000      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800312c:	4b75      	ldr	r3, [pc, #468]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313a:	4972      	ldr	r1, [pc, #456]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d03f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d01c      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800315e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003162:	d802      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003168:	e01f      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800316a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316e:	d003      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003170:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003174:	d01c      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003176:	e018      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003178:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a61      	ldr	r2, [pc, #388]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003184:	e015      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3304      	adds	r3, #4
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fa73 	bl	8003678 <RCCEx_PLLSAI1_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003196:	e00c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3320      	adds	r3, #32
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb5a 	bl	8003858 <RCCEx_PLLSAI2_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a8:	e003      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	74fb      	strb	r3, [r7, #19]
      break;
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b2:	7cfb      	ldrb	r3, [r7, #19]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b8:	4b52      	ldr	r3, [pc, #328]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c6:	494f      	ldr	r1, [pc, #316]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ce:	e001      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a0 	beq.w	8003322 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80031f6:	2300      	movs	r3, #0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b41      	ldr	r3, [pc, #260]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	4a40      	ldr	r2, [pc, #256]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003214:	2301      	movs	r3, #1
 8003216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3a      	ldr	r2, [pc, #232]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003224:	f7fe fdf2 	bl	8001e0c <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800322a:	e009      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe fdee 	bl	8001e0c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	74fb      	strb	r3, [r7, #19]
        break;
 800323e:	e005      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ef      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d15c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d019      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	4a20      	ldr	r2, [pc, #128]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fdad 	bl	8001e0c <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b4:	e00b      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fe fda9 	bl	8001e0c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d902      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	74fb      	strb	r3, [r7, #19]
            break;
 80032cc:	e006      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ec      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10c      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f2:	4904      	ldr	r1, [pc, #16]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032fa:	e009      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
 8003300:	e006      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003310:	7c7b      	ldrb	r3, [r7, #17]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b9e      	ldr	r3, [pc, #632]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	4a9d      	ldr	r2, [pc, #628]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800332e:	4b98      	ldr	r3, [pc, #608]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f023 0203 	bic.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	4994      	ldr	r1, [pc, #592]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003350:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 020c 	bic.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	498c      	ldr	r1, [pc, #560]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003372:	4b87      	ldr	r3, [pc, #540]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	4983      	ldr	r1, [pc, #524]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	497b      	ldr	r1, [pc, #492]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c4:	4972      	ldr	r1, [pc, #456]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d8:	4b6d      	ldr	r3, [pc, #436]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	496a      	ldr	r1, [pc, #424]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	4961      	ldr	r1, [pc, #388]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800341c:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800341e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	4959      	ldr	r1, [pc, #356]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343e:	4b54      	ldr	r3, [pc, #336]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	4950      	ldr	r1, [pc, #320]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003460:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	4948      	ldr	r1, [pc, #288]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	493f      	ldr	r1, [pc, #252]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d028      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b2:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c2:	d106      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a31      	ldr	r2, [pc, #196]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ce:	60d3      	str	r3, [r2, #12]
 80034d0:	e011      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034da:	d10c      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f8c8 	bl	8003678 <RCCEx_PLLSAI1_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034ec:	7cfb      	ldrb	r3, [r7, #19]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003502:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	491f      	ldr	r1, [pc, #124]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003520:	d106      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	4a1a      	ldr	r2, [pc, #104]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352c:	60d3      	str	r3, [r2, #12]
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003538:	d10c      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f899 	bl	8003678 <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02b      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	4908      	ldr	r1, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357e:	d109      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a02      	ldr	r2, [pc, #8]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358a:	60d3      	str	r3, [r2, #12]
 800358c:	e014      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3304      	adds	r3, #4
 80035a2:	2101      	movs	r1, #1
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f867 	bl	8003678 <RCCEx_PLLSAI1_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ae:	7cfb      	ldrb	r3, [r7, #19]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02f      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	4928      	ldr	r1, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e2:	d10d      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f844 	bl	8003678 <RCCEx_PLLSAI1_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d014      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	74bb      	strb	r3, [r7, #18]
 80035fe:	e011      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3320      	adds	r3, #32
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f921 	bl	8003858 <RCCEx_PLLSAI2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	4904      	ldr	r1, [pc, #16]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800366a:	7cbb      	ldrb	r3, [r7, #18]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000

08003678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003686:	4b73      	ldr	r3, [pc, #460]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d018      	beq.n	80036c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003692:	4b70      	ldr	r3, [pc, #448]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0203 	and.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d10d      	bne.n	80036be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
       ||
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036aa:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
       ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d044      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e041      	b.n	8003748 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d00c      	beq.n	80036e6 <RCCEx_PLLSAI1_Config+0x6e>
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d013      	beq.n	80036f8 <RCCEx_PLLSAI1_Config+0x80>
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d120      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d4:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e4:	e01a      	b.n	800371c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e013      	b.n	8003720 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036f8:	4b56      	ldr	r3, [pc, #344]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10f      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003714:	e006      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
      break;
 800371a:	e004      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800371c:	bf00      	nop
 800371e:	e002      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003724:	bf00      	nop
    }

    if(status == HAL_OK)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372c:	4b49      	ldr	r3, [pc, #292]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	3b01      	subs	r3, #1
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	430b      	orrs	r3, r1
 8003742:	4944      	ldr	r1, [pc, #272]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003744:	4313      	orrs	r3, r2
 8003746:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d17d      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a40      	ldr	r2, [pc, #256]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003754:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375a:	f7fe fb57 	bl	8001e0c <HAL_GetTick>
 800375e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003760:	e009      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003762:	f7fe fb53 	bl	8001e0c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d902      	bls.n	8003776 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	73fb      	strb	r3, [r7, #15]
        break;
 8003774:	e005      	b.n	8003782 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ef      	bne.n	8003762 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d160      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d111      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	0211      	lsls	r1, r2, #8
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	0912      	lsrs	r2, r2, #4
 80037a6:	0452      	lsls	r2, r2, #17
 80037a8:	430a      	orrs	r2, r1
 80037aa:	492a      	ldr	r1, [pc, #168]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	610b      	str	r3, [r1, #16]
 80037b0:	e027      	b.n	8003802 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d112      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b26      	ldr	r3, [pc, #152]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6912      	ldr	r2, [r2, #16]
 80037ce:	0852      	lsrs	r2, r2, #1
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0552      	lsls	r2, r2, #21
 80037d4:	430a      	orrs	r2, r1
 80037d6:	491f      	ldr	r1, [pc, #124]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
 80037dc:	e011      	b.n	8003802 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0652      	lsls	r2, r2, #25
 80037fa:	430a      	orrs	r2, r1
 80037fc:	4915      	ldr	r1, [pc, #84]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe fafd 	bl	8001e0c <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003814:	e009      	b.n	800382a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003816:	f7fe faf9 	bl	8001e0c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d902      	bls.n	800382a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	73fb      	strb	r3, [r7, #15]
          break;
 8003828:	e005      	b.n	8003836 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ef      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4903      	ldr	r1, [pc, #12]	; (8003854 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388a:	4b5f      	ldr	r3, [pc, #380]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
       ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d044      	beq.n	8003928 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e041      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d00c      	beq.n	80038c6 <RCCEx_PLLSAI2_Config+0x6e>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d013      	beq.n	80038d8 <RCCEx_PLLSAI2_Config+0x80>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d120      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038b4:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e01a      	b.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c6:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d6:	e013      	b.n	8003900 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d8:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038e4:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038f4:	e006      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      break;
 80038fa:	e004      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80038fc:	bf00      	nop
 80038fe:	e002      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003904:	bf00      	nop
    }

    if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	3b01      	subs	r3, #1
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	430b      	orrs	r3, r1
 8003922:	4939      	ldr	r1, [pc, #228]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d167      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a35      	ldr	r2, [pc, #212]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393a:	f7fe fa67 	bl	8001e0c <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003940:	e009      	b.n	8003956 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003942:	f7fe fa63 	bl	8001e0c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d902      	bls.n	8003956 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	73fb      	strb	r3, [r7, #15]
        break;
 8003954:	e005      	b.n	8003962 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ef      	bne.n	8003942 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d14a      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d111      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	0211      	lsls	r1, r2, #8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68d2      	ldr	r2, [r2, #12]
 8003984:	0912      	lsrs	r2, r2, #4
 8003986:	0452      	lsls	r2, r2, #17
 8003988:	430a      	orrs	r2, r1
 800398a:	491f      	ldr	r1, [pc, #124]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 800398c:	4313      	orrs	r3, r2
 800398e:	614b      	str	r3, [r1, #20]
 8003990:	e011      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800399a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6892      	ldr	r2, [r2, #8]
 80039a2:	0211      	lsls	r1, r2, #8
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6912      	ldr	r2, [r2, #16]
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0652      	lsls	r2, r2, #25
 80039ae:	430a      	orrs	r2, r1
 80039b0:	4915      	ldr	r1, [pc, #84]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7fe fa23 	bl	8001e0c <HAL_GetTick>
 80039c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039c8:	e009      	b.n	80039de <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ca:	f7fe fa1f 	bl	8001e0c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d902      	bls.n	80039de <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	73fb      	strb	r3, [r7, #15]
          break;
 80039dc:	e005      	b.n	80039ea <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039f2:	695a      	ldr	r2, [r3, #20]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fe f830 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f9e6 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e047      	b.n	8003b64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_TIM_Base_Start+0xb4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d018      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_TIM_Base_Start+0xb8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_TIM_Base_Start+0xbc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_TIM_Base_Start+0xc0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_TIM_Base_Start+0xc4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_Base_Start+0x66>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <HAL_TIM_Base_Start+0xc8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d115      	bne.n	8003b4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <HAL_TIM_Base_Start+0xcc>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d015      	beq.n	8003b60 <HAL_TIM_Base_Start+0xa4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d011      	beq.n	8003b60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	e008      	b.n	8003b60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	00010007 	.word	0x00010007

08003b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d122      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d11b      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0202 	mvn.w	r2, #2
 8003bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f905 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003bd4:	e005      	b.n	8003be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8f7 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f908 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d122      	bne.n	8003c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d11b      	bne.n	8003c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0204 	mvn.w	r2, #4
 8003c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8db 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003c28:	e005      	b.n	8003c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8cd 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8de 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d122      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0208 	mvn.w	r2, #8
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8b1 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8a3 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8b4 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0210 	mvn.w	r2, #16
 8003cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f887 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f879 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f88a 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0201 	mvn.w	r2, #1
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd fa18 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f914 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d10e      	bne.n	8003d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d107      	bne.n	8003d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f907 	bl	8003f78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d10e      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d107      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f838 	bl	8003e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d10e      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0220 	mvn.w	r2, #32
 8003dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8c7 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d01b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d017      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <TIM_Base_SetConfig+0x128>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <TIM_Base_SetConfig+0x130>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <TIM_Base_SetConfig+0x128>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <TIM_Base_SetConfig+0x130>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e040      	b.n	8004020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fdb4 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f98c 	bl	80042e8 <UART_SetConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fc0a 	bl	80047fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fc91 	bl	8004940 <UART_CheckIdleState>
 800401e:	4603      	mov	r3, r0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	2b20      	cmp	r3, #32
 800403e:	f040 8081 	bne.w	8004144 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Transmit+0x26>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e079      	b.n	8004146 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_UART_Transmit+0x38>
 800405c:	2302      	movs	r3, #2
 800405e:	e072      	b.n	8004146 <HAL_UART_Transmit+0x11e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2221      	movs	r2, #33	; 0x21
 8004072:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004074:	f7fd feca 	bl	8001e0c <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d108      	bne.n	80040a6 <HAL_UART_Transmit+0x7e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e003      	b.n	80040ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80040b6:	e02d      	b.n	8004114 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fc81 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e039      	b.n	8004146 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e4:	b292      	uxth	r2, r2
 80040e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3302      	adds	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e008      	b.n	8004102 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	b292      	uxth	r2, r2
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1cb      	bne.n	80040b8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fc4d 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e005      	b.n	8004146 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08a      	sub	sp, #40	; 0x28
 8004152:	af02      	add	r7, sp, #8
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	2b20      	cmp	r3, #32
 8004164:	f040 80bb 	bne.w	80042de <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Receive+0x26>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b3      	b.n	80042e0 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Receive+0x38>
 8004182:	2302      	movs	r3, #2
 8004184:	e0ac      	b.n	80042e0 <HAL_UART_Receive+0x192>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2222      	movs	r2, #34	; 0x22
 8004198:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800419a:	f7fd fe37 	bl	8001e0c <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d10e      	bne.n	80041d8 <HAL_UART_Receive+0x8a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <HAL_UART_Receive+0x80>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041cc:	e02d      	b.n	800422a <HAL_UART_Receive+0xdc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	22ff      	movs	r2, #255	; 0xff
 80041d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041d6:	e028      	b.n	800422a <HAL_UART_Receive+0xdc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10d      	bne.n	80041fc <HAL_UART_Receive+0xae>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_UART_Receive+0xa4>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	22ff      	movs	r2, #255	; 0xff
 80041ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041f0:	e01b      	b.n	800422a <HAL_UART_Receive+0xdc>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	227f      	movs	r2, #127	; 0x7f
 80041f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041fa:	e016      	b.n	800422a <HAL_UART_Receive+0xdc>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004204:	d10d      	bne.n	8004222 <HAL_UART_Receive+0xd4>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d104      	bne.n	8004218 <HAL_UART_Receive+0xca>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	227f      	movs	r2, #127	; 0x7f
 8004212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004216:	e008      	b.n	800422a <HAL_UART_Receive+0xdc>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	223f      	movs	r2, #63	; 0x3f
 800421c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004220:	e003      	b.n	800422a <HAL_UART_Receive+0xdc>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004230:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423a:	d108      	bne.n	800424e <HAL_UART_Receive+0x100>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	e003      	b.n	8004256 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800425e:	e033      	b.n	80042c8 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2200      	movs	r2, #0
 8004268:	2120      	movs	r1, #32
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fbad 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e032      	b.n	80042e0 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004286:	b29a      	uxth	r2, r3
 8004288:	8a7b      	ldrh	r3, [r7, #18]
 800428a:	4013      	ands	r3, r2
 800428c:	b29a      	uxth	r2, r3
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e00d      	b.n	80042b6 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	8a7b      	ldrh	r3, [r7, #18]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4013      	ands	r3, r2
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	3301      	adds	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1c5      	bne.n	8004260 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042ec:	b088      	sub	sp, #32
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4313      	orrs	r3, r2
 800430c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4bac      	ldr	r3, [pc, #688]	; (80045c8 <UART_SetConfig+0x2e0>)
 8004316:	4013      	ands	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	430b      	orrs	r3, r1
 8004320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4aa2      	ldr	r2, [pc, #648]	; (80045cc <UART_SetConfig+0x2e4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	4313      	orrs	r3, r2
 8004350:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a99      	ldr	r2, [pc, #612]	; (80045d0 <UART_SetConfig+0x2e8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d121      	bne.n	80043b4 <UART_SetConfig+0xcc>
 8004370:	4b98      	ldr	r3, [pc, #608]	; (80045d4 <UART_SetConfig+0x2ec>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d816      	bhi.n	80043ac <UART_SetConfig+0xc4>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0x9c>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	08004395 	.word	0x08004395
 8004388:	080043a1 	.word	0x080043a1
 800438c:	0800439b 	.word	0x0800439b
 8004390:	080043a7 	.word	0x080043a7
 8004394:	2301      	movs	r3, #1
 8004396:	76fb      	strb	r3, [r7, #27]
 8004398:	e0e8      	b.n	800456c <UART_SetConfig+0x284>
 800439a:	2302      	movs	r3, #2
 800439c:	76fb      	strb	r3, [r7, #27]
 800439e:	e0e5      	b.n	800456c <UART_SetConfig+0x284>
 80043a0:	2304      	movs	r3, #4
 80043a2:	76fb      	strb	r3, [r7, #27]
 80043a4:	e0e2      	b.n	800456c <UART_SetConfig+0x284>
 80043a6:	2308      	movs	r3, #8
 80043a8:	76fb      	strb	r3, [r7, #27]
 80043aa:	e0df      	b.n	800456c <UART_SetConfig+0x284>
 80043ac:	2310      	movs	r3, #16
 80043ae:	76fb      	strb	r3, [r7, #27]
 80043b0:	bf00      	nop
 80043b2:	e0db      	b.n	800456c <UART_SetConfig+0x284>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a87      	ldr	r2, [pc, #540]	; (80045d8 <UART_SetConfig+0x2f0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d134      	bne.n	8004428 <UART_SetConfig+0x140>
 80043be:	4b85      	ldr	r3, [pc, #532]	; (80045d4 <UART_SetConfig+0x2ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d829      	bhi.n	8004420 <UART_SetConfig+0x138>
 80043cc:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0xec>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	08004409 	.word	0x08004409
 80043d8:	08004421 	.word	0x08004421
 80043dc:	08004421 	.word	0x08004421
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004421 	.word	0x08004421
 80043f4:	0800440f 	.word	0x0800440f
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004421 	.word	0x08004421
 8004404:	0800441b 	.word	0x0800441b
 8004408:	2300      	movs	r3, #0
 800440a:	76fb      	strb	r3, [r7, #27]
 800440c:	e0ae      	b.n	800456c <UART_SetConfig+0x284>
 800440e:	2302      	movs	r3, #2
 8004410:	76fb      	strb	r3, [r7, #27]
 8004412:	e0ab      	b.n	800456c <UART_SetConfig+0x284>
 8004414:	2304      	movs	r3, #4
 8004416:	76fb      	strb	r3, [r7, #27]
 8004418:	e0a8      	b.n	800456c <UART_SetConfig+0x284>
 800441a:	2308      	movs	r3, #8
 800441c:	76fb      	strb	r3, [r7, #27]
 800441e:	e0a5      	b.n	800456c <UART_SetConfig+0x284>
 8004420:	2310      	movs	r3, #16
 8004422:	76fb      	strb	r3, [r7, #27]
 8004424:	bf00      	nop
 8004426:	e0a1      	b.n	800456c <UART_SetConfig+0x284>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a6b      	ldr	r2, [pc, #428]	; (80045dc <UART_SetConfig+0x2f4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d120      	bne.n	8004474 <UART_SetConfig+0x18c>
 8004432:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <UART_SetConfig+0x2ec>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800443c:	2b10      	cmp	r3, #16
 800443e:	d00f      	beq.n	8004460 <UART_SetConfig+0x178>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d802      	bhi.n	800444a <UART_SetConfig+0x162>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <UART_SetConfig+0x16c>
 8004448:	e010      	b.n	800446c <UART_SetConfig+0x184>
 800444a:	2b20      	cmp	r3, #32
 800444c:	d005      	beq.n	800445a <UART_SetConfig+0x172>
 800444e:	2b30      	cmp	r3, #48	; 0x30
 8004450:	d009      	beq.n	8004466 <UART_SetConfig+0x17e>
 8004452:	e00b      	b.n	800446c <UART_SetConfig+0x184>
 8004454:	2300      	movs	r3, #0
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	e088      	b.n	800456c <UART_SetConfig+0x284>
 800445a:	2302      	movs	r3, #2
 800445c:	76fb      	strb	r3, [r7, #27]
 800445e:	e085      	b.n	800456c <UART_SetConfig+0x284>
 8004460:	2304      	movs	r3, #4
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	e082      	b.n	800456c <UART_SetConfig+0x284>
 8004466:	2308      	movs	r3, #8
 8004468:	76fb      	strb	r3, [r7, #27]
 800446a:	e07f      	b.n	800456c <UART_SetConfig+0x284>
 800446c:	2310      	movs	r3, #16
 800446e:	76fb      	strb	r3, [r7, #27]
 8004470:	bf00      	nop
 8004472:	e07b      	b.n	800456c <UART_SetConfig+0x284>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a59      	ldr	r2, [pc, #356]	; (80045e0 <UART_SetConfig+0x2f8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d120      	bne.n	80044c0 <UART_SetConfig+0x1d8>
 800447e:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <UART_SetConfig+0x2ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d00f      	beq.n	80044ac <UART_SetConfig+0x1c4>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d802      	bhi.n	8004496 <UART_SetConfig+0x1ae>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <UART_SetConfig+0x1b8>
 8004494:	e010      	b.n	80044b8 <UART_SetConfig+0x1d0>
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d005      	beq.n	80044a6 <UART_SetConfig+0x1be>
 800449a:	2bc0      	cmp	r3, #192	; 0xc0
 800449c:	d009      	beq.n	80044b2 <UART_SetConfig+0x1ca>
 800449e:	e00b      	b.n	80044b8 <UART_SetConfig+0x1d0>
 80044a0:	2300      	movs	r3, #0
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e062      	b.n	800456c <UART_SetConfig+0x284>
 80044a6:	2302      	movs	r3, #2
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e05f      	b.n	800456c <UART_SetConfig+0x284>
 80044ac:	2304      	movs	r3, #4
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e05c      	b.n	800456c <UART_SetConfig+0x284>
 80044b2:	2308      	movs	r3, #8
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e059      	b.n	800456c <UART_SetConfig+0x284>
 80044b8:	2310      	movs	r3, #16
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	bf00      	nop
 80044be:	e055      	b.n	800456c <UART_SetConfig+0x284>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a47      	ldr	r2, [pc, #284]	; (80045e4 <UART_SetConfig+0x2fc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d124      	bne.n	8004514 <UART_SetConfig+0x22c>
 80044ca:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <UART_SetConfig+0x2ec>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d8:	d012      	beq.n	8004500 <UART_SetConfig+0x218>
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d802      	bhi.n	80044e6 <UART_SetConfig+0x1fe>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <UART_SetConfig+0x20c>
 80044e4:	e012      	b.n	800450c <UART_SetConfig+0x224>
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	d006      	beq.n	80044fa <UART_SetConfig+0x212>
 80044ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f0:	d009      	beq.n	8004506 <UART_SetConfig+0x21e>
 80044f2:	e00b      	b.n	800450c <UART_SetConfig+0x224>
 80044f4:	2300      	movs	r3, #0
 80044f6:	76fb      	strb	r3, [r7, #27]
 80044f8:	e038      	b.n	800456c <UART_SetConfig+0x284>
 80044fa:	2302      	movs	r3, #2
 80044fc:	76fb      	strb	r3, [r7, #27]
 80044fe:	e035      	b.n	800456c <UART_SetConfig+0x284>
 8004500:	2304      	movs	r3, #4
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	e032      	b.n	800456c <UART_SetConfig+0x284>
 8004506:	2308      	movs	r3, #8
 8004508:	76fb      	strb	r3, [r7, #27]
 800450a:	e02f      	b.n	800456c <UART_SetConfig+0x284>
 800450c:	2310      	movs	r3, #16
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	bf00      	nop
 8004512:	e02b      	b.n	800456c <UART_SetConfig+0x284>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <UART_SetConfig+0x2e4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d124      	bne.n	8004568 <UART_SetConfig+0x280>
 800451e:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <UART_SetConfig+0x2ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452c:	d012      	beq.n	8004554 <UART_SetConfig+0x26c>
 800452e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004532:	d802      	bhi.n	800453a <UART_SetConfig+0x252>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <UART_SetConfig+0x260>
 8004538:	e012      	b.n	8004560 <UART_SetConfig+0x278>
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d006      	beq.n	800454e <UART_SetConfig+0x266>
 8004540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004544:	d009      	beq.n	800455a <UART_SetConfig+0x272>
 8004546:	e00b      	b.n	8004560 <UART_SetConfig+0x278>
 8004548:	2300      	movs	r3, #0
 800454a:	76fb      	strb	r3, [r7, #27]
 800454c:	e00e      	b.n	800456c <UART_SetConfig+0x284>
 800454e:	2302      	movs	r3, #2
 8004550:	76fb      	strb	r3, [r7, #27]
 8004552:	e00b      	b.n	800456c <UART_SetConfig+0x284>
 8004554:	2304      	movs	r3, #4
 8004556:	76fb      	strb	r3, [r7, #27]
 8004558:	e008      	b.n	800456c <UART_SetConfig+0x284>
 800455a:	2308      	movs	r3, #8
 800455c:	76fb      	strb	r3, [r7, #27]
 800455e:	e005      	b.n	800456c <UART_SetConfig+0x284>
 8004560:	2310      	movs	r3, #16
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	bf00      	nop
 8004566:	e001      	b.n	800456c <UART_SetConfig+0x284>
 8004568:	2310      	movs	r3, #16
 800456a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a16      	ldr	r2, [pc, #88]	; (80045cc <UART_SetConfig+0x2e4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	f040 8087 	bne.w	8004686 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004578:	7efb      	ldrb	r3, [r7, #27]
 800457a:	2b08      	cmp	r3, #8
 800457c:	d836      	bhi.n	80045ec <UART_SetConfig+0x304>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0x29c>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045ed 	.word	0x080045ed
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045ed 	.word	0x080045ed
 8004594:	080045b7 	.word	0x080045b7
 8004598:	080045ed 	.word	0x080045ed
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045ed 	.word	0x080045ed
 80045a4:	080045bf 	.word	0x080045bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7fe fcf4 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80045ac:	6178      	str	r0, [r7, #20]
        break;
 80045ae:	e022      	b.n	80045f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <UART_SetConfig+0x300>)
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e01f      	b.n	80045f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b6:	f7fe fc57 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80045ba:	6178      	str	r0, [r7, #20]
        break;
 80045bc:	e01b      	b.n	80045f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045c2:	617b      	str	r3, [r7, #20]
        break;
 80045c4:	e017      	b.n	80045f6 <UART_SetConfig+0x30e>
 80045c6:	bf00      	nop
 80045c8:	efff69f3 	.word	0xefff69f3
 80045cc:	40008000 	.word	0x40008000
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40004800 	.word	0x40004800
 80045e0:	40004c00 	.word	0x40004c00
 80045e4:	40005000 	.word	0x40005000
 80045e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	76bb      	strb	r3, [r7, #26]
        break;
 80045f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80f1 	beq.w	80047e0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	429a      	cmp	r2, r3
 800460c:	d305      	bcc.n	800461a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	429a      	cmp	r2, r3
 8004618:	d902      	bls.n	8004620 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	76bb      	strb	r3, [r7, #26]
 800461e:	e0df      	b.n	80047e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4619      	mov	r1, r3
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	0214      	lsls	r4, r2, #8
 8004632:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004636:	020b      	lsls	r3, r1, #8
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6852      	ldr	r2, [r2, #4]
 800463c:	0852      	lsrs	r2, r2, #1
 800463e:	4611      	mov	r1, r2
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	eb13 0b01 	adds.w	fp, r3, r1
 8004648:	eb44 0c02 	adc.w	ip, r4, r2
 800464c:	4658      	mov	r0, fp
 800464e:	4661      	mov	r1, ip
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f04f 0400 	mov.w	r4, #0
 8004658:	461a      	mov	r2, r3
 800465a:	4623      	mov	r3, r4
 800465c:	f7fc fa8a 	bl	8000b74 <__aeabi_uldivmod>
 8004660:	4603      	mov	r3, r0
 8004662:	460c      	mov	r4, r1
 8004664:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d308      	bcc.n	8004680 <UART_SetConfig+0x398>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004674:	d204      	bcs.n	8004680 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	e0af      	b.n	80047e0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	76bb      	strb	r3, [r7, #26]
 8004684:	e0ac      	b.n	80047e0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d15b      	bne.n	8004748 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004690:	7efb      	ldrb	r3, [r7, #27]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d827      	bhi.n	80046e6 <UART_SetConfig+0x3fe>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0x3b4>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d7 	.word	0x080046d7
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046e7 	.word	0x080046e7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7fe fc68 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80046c4:	6178      	str	r0, [r7, #20]
        break;
 80046c6:	e013      	b.n	80046f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7fe fc7a 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 80046cc:	6178      	str	r0, [r7, #20]
        break;
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <UART_SetConfig+0x510>)
 80046d2:	617b      	str	r3, [r7, #20]
        break;
 80046d4:	e00c      	b.n	80046f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7fe fbc7 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 80046da:	6178      	str	r0, [r7, #20]
        break;
 80046dc:	e008      	b.n	80046f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	617b      	str	r3, [r7, #20]
        break;
 80046e4:	e004      	b.n	80046f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	76bb      	strb	r3, [r7, #26]
        break;
 80046ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d074      	beq.n	80047e0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005a      	lsls	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	441a      	add	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
 800470a:	b29b      	uxth	r3, r3
 800470c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d916      	bls.n	8004742 <UART_SetConfig+0x45a>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d212      	bcs.n	8004742 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f023 030f 	bic.w	r3, r3, #15
 8004724:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	b29a      	uxth	r2, r3
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	4313      	orrs	r3, r2
 8004736:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	89fa      	ldrh	r2, [r7, #14]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	e04e      	b.n	80047e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	76bb      	strb	r3, [r7, #26]
 8004746:	e04b      	b.n	80047e0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004748:	7efb      	ldrb	r3, [r7, #27]
 800474a:	2b08      	cmp	r3, #8
 800474c:	d827      	bhi.n	800479e <UART_SetConfig+0x4b6>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x46c>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004779 	.word	0x08004779
 8004758:	08004781 	.word	0x08004781
 800475c:	08004789 	.word	0x08004789
 8004760:	0800479f 	.word	0x0800479f
 8004764:	0800478f 	.word	0x0800478f
 8004768:	0800479f 	.word	0x0800479f
 800476c:	0800479f 	.word	0x0800479f
 8004770:	0800479f 	.word	0x0800479f
 8004774:	08004797 	.word	0x08004797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7fe fc0c 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 800477c:	6178      	str	r0, [r7, #20]
        break;
 800477e:	e013      	b.n	80047a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7fe fc1e 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8004784:	6178      	str	r0, [r7, #20]
        break;
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <UART_SetConfig+0x510>)
 800478a:	617b      	str	r3, [r7, #20]
        break;
 800478c:	e00c      	b.n	80047a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478e:	f7fe fb6b 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8004792:	6178      	str	r0, [r7, #20]
        break;
 8004794:	e008      	b.n	80047a8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	617b      	str	r3, [r7, #20]
        break;
 800479c:	e004      	b.n	80047a8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	76bb      	strb	r3, [r7, #26]
        break;
 80047a6:	bf00      	nop
    }

    if (pclk != 0U)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	085a      	lsrs	r2, r3, #1
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	441a      	add	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d908      	bls.n	80047dc <UART_SetConfig+0x4f4>
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d204      	bcs.n	80047dc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	e001      	b.n	80047e0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80047ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80047f8:	00f42400 	.word	0x00f42400

080047fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01a      	beq.n	8004912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fa:	d10a      	bne.n	8004912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af02      	add	r7, sp, #8
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800494e:	f7fd fa5d 	bl	8001e0c <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d10e      	bne.n	8004980 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f82a 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e020      	b.n	80049c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d10e      	bne.n	80049ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800498e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f814 	bl	80049ca <UART_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e00a      	b.n	80049c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	e05d      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e2:	d059      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fd fa12 	bl	8001e0c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <UART_WaitOnFlagUntilTimeout+0x30>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11b      	bne.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e042      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02b      	beq.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4e:	d123      	bne.n	8004a98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e00f      	b.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d092      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <atoi>:
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f000 b8a8 	b.w	8004c18 <strtol>

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4e0d      	ldr	r6, [pc, #52]	; (8004b00 <__libc_init_array+0x38>)
 8004acc:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ace:	1ba4      	subs	r4, r4, r6
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	42a5      	cmp	r5, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	4e0b      	ldr	r6, [pc, #44]	; (8004b08 <__libc_init_array+0x40>)
 8004ada:	4c0c      	ldr	r4, [pc, #48]	; (8004b0c <__libc_init_array+0x44>)
 8004adc:	f001 f8e6 	bl	8005cac <_init>
 8004ae0:	1ba4      	subs	r4, r4, r6
 8004ae2:	10a4      	asrs	r4, r4, #2
 8004ae4:	2500      	movs	r5, #0
 8004ae6:	42a5      	cmp	r5, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004af0:	4798      	blx	r3
 8004af2:	3501      	adds	r5, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afa:	4798      	blx	r3
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	080060b0 	.word	0x080060b0
 8004b04:	080060b0 	.word	0x080060b0
 8004b08:	080060b0 	.word	0x080060b0
 8004b0c:	080060b4 	.word	0x080060b4

08004b10 <memset>:
 8004b10:	4402      	add	r2, r0
 8004b12:	4603      	mov	r3, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_strtol_l.isra.0>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	4680      	mov	r8, r0
 8004b26:	4689      	mov	r9, r1
 8004b28:	4692      	mov	sl, r2
 8004b2a:	461e      	mov	r6, r3
 8004b2c:	460f      	mov	r7, r1
 8004b2e:	463d      	mov	r5, r7
 8004b30:	9808      	ldr	r0, [sp, #32]
 8004b32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b36:	f000 f885 	bl	8004c44 <__locale_ctype_ptr_l>
 8004b3a:	4420      	add	r0, r4
 8004b3c:	7843      	ldrb	r3, [r0, #1]
 8004b3e:	f013 0308 	ands.w	r3, r3, #8
 8004b42:	d132      	bne.n	8004baa <_strtol_l.isra.0+0x8a>
 8004b44:	2c2d      	cmp	r4, #45	; 0x2d
 8004b46:	d132      	bne.n	8004bae <_strtol_l.isra.0+0x8e>
 8004b48:	787c      	ldrb	r4, [r7, #1]
 8004b4a:	1cbd      	adds	r5, r7, #2
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d05d      	beq.n	8004c0e <_strtol_l.isra.0+0xee>
 8004b52:	2e10      	cmp	r6, #16
 8004b54:	d109      	bne.n	8004b6a <_strtol_l.isra.0+0x4a>
 8004b56:	2c30      	cmp	r4, #48	; 0x30
 8004b58:	d107      	bne.n	8004b6a <_strtol_l.isra.0+0x4a>
 8004b5a:	782b      	ldrb	r3, [r5, #0]
 8004b5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b60:	2b58      	cmp	r3, #88	; 0x58
 8004b62:	d14f      	bne.n	8004c04 <_strtol_l.isra.0+0xe4>
 8004b64:	786c      	ldrb	r4, [r5, #1]
 8004b66:	2610      	movs	r6, #16
 8004b68:	3502      	adds	r5, #2
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	bf14      	ite	ne
 8004b6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004b72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004b76:	2700      	movs	r7, #0
 8004b78:	fbb1 fcf6 	udiv	ip, r1, r6
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004b82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	d817      	bhi.n	8004bba <_strtol_l.isra.0+0x9a>
 8004b8a:	461c      	mov	r4, r3
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	dd23      	ble.n	8004bd8 <_strtol_l.isra.0+0xb8>
 8004b90:	1c7b      	adds	r3, r7, #1
 8004b92:	d007      	beq.n	8004ba4 <_strtol_l.isra.0+0x84>
 8004b94:	4584      	cmp	ip, r0
 8004b96:	d31c      	bcc.n	8004bd2 <_strtol_l.isra.0+0xb2>
 8004b98:	d101      	bne.n	8004b9e <_strtol_l.isra.0+0x7e>
 8004b9a:	45a6      	cmp	lr, r4
 8004b9c:	db19      	blt.n	8004bd2 <_strtol_l.isra.0+0xb2>
 8004b9e:	fb00 4006 	mla	r0, r0, r6, r4
 8004ba2:	2701      	movs	r7, #1
 8004ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ba8:	e7eb      	b.n	8004b82 <_strtol_l.isra.0+0x62>
 8004baa:	462f      	mov	r7, r5
 8004bac:	e7bf      	b.n	8004b2e <_strtol_l.isra.0+0xe>
 8004bae:	2c2b      	cmp	r4, #43	; 0x2b
 8004bb0:	bf04      	itt	eq
 8004bb2:	1cbd      	addeq	r5, r7, #2
 8004bb4:	787c      	ldrbeq	r4, [r7, #1]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	e7c9      	b.n	8004b4e <_strtol_l.isra.0+0x2e>
 8004bba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004bbe:	2b19      	cmp	r3, #25
 8004bc0:	d801      	bhi.n	8004bc6 <_strtol_l.isra.0+0xa6>
 8004bc2:	3c37      	subs	r4, #55	; 0x37
 8004bc4:	e7e2      	b.n	8004b8c <_strtol_l.isra.0+0x6c>
 8004bc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004bca:	2b19      	cmp	r3, #25
 8004bcc:	d804      	bhi.n	8004bd8 <_strtol_l.isra.0+0xb8>
 8004bce:	3c57      	subs	r4, #87	; 0x57
 8004bd0:	e7dc      	b.n	8004b8c <_strtol_l.isra.0+0x6c>
 8004bd2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bd6:	e7e5      	b.n	8004ba4 <_strtol_l.isra.0+0x84>
 8004bd8:	1c7b      	adds	r3, r7, #1
 8004bda:	d108      	bne.n	8004bee <_strtol_l.isra.0+0xce>
 8004bdc:	2322      	movs	r3, #34	; 0x22
 8004bde:	f8c8 3000 	str.w	r3, [r8]
 8004be2:	4608      	mov	r0, r1
 8004be4:	f1ba 0f00 	cmp.w	sl, #0
 8004be8:	d107      	bne.n	8004bfa <_strtol_l.isra.0+0xda>
 8004bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bee:	b102      	cbz	r2, 8004bf2 <_strtol_l.isra.0+0xd2>
 8004bf0:	4240      	negs	r0, r0
 8004bf2:	f1ba 0f00 	cmp.w	sl, #0
 8004bf6:	d0f8      	beq.n	8004bea <_strtol_l.isra.0+0xca>
 8004bf8:	b10f      	cbz	r7, 8004bfe <_strtol_l.isra.0+0xde>
 8004bfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bfe:	f8ca 9000 	str.w	r9, [sl]
 8004c02:	e7f2      	b.n	8004bea <_strtol_l.isra.0+0xca>
 8004c04:	2430      	movs	r4, #48	; 0x30
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	d1af      	bne.n	8004b6a <_strtol_l.isra.0+0x4a>
 8004c0a:	2608      	movs	r6, #8
 8004c0c:	e7ad      	b.n	8004b6a <_strtol_l.isra.0+0x4a>
 8004c0e:	2c30      	cmp	r4, #48	; 0x30
 8004c10:	d0a3      	beq.n	8004b5a <_strtol_l.isra.0+0x3a>
 8004c12:	260a      	movs	r6, #10
 8004c14:	e7a9      	b.n	8004b6a <_strtol_l.isra.0+0x4a>
	...

08004c18 <strtol>:
 8004c18:	4b08      	ldr	r3, [pc, #32]	; (8004c3c <strtol+0x24>)
 8004c1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c1c:	681c      	ldr	r4, [r3, #0]
 8004c1e:	4d08      	ldr	r5, [pc, #32]	; (8004c40 <strtol+0x28>)
 8004c20:	6a23      	ldr	r3, [r4, #32]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf08      	it	eq
 8004c26:	462b      	moveq	r3, r5
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff ff75 	bl	8004b20 <_strtol_l.isra.0>
 8004c36:	b003      	add	sp, #12
 8004c38:	bd30      	pop	{r4, r5, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2000002c 	.word	0x2000002c
 8004c40:	20000090 	.word	0x20000090

08004c44 <__locale_ctype_ptr_l>:
 8004c44:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004c48:	4770      	bx	lr

08004c4a <__ascii_mbtowc>:
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	b901      	cbnz	r1, 8004c50 <__ascii_mbtowc+0x6>
 8004c4e:	a901      	add	r1, sp, #4
 8004c50:	b142      	cbz	r2, 8004c64 <__ascii_mbtowc+0x1a>
 8004c52:	b14b      	cbz	r3, 8004c68 <__ascii_mbtowc+0x1e>
 8004c54:	7813      	ldrb	r3, [r2, #0]
 8004c56:	600b      	str	r3, [r1, #0]
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	1c10      	adds	r0, r2, #0
 8004c5c:	bf18      	it	ne
 8004c5e:	2001      	movne	r0, #1
 8004c60:	b002      	add	sp, #8
 8004c62:	4770      	bx	lr
 8004c64:	4610      	mov	r0, r2
 8004c66:	e7fb      	b.n	8004c60 <__ascii_mbtowc+0x16>
 8004c68:	f06f 0001 	mvn.w	r0, #1
 8004c6c:	e7f8      	b.n	8004c60 <__ascii_mbtowc+0x16>

08004c6e <__ascii_wctomb>:
 8004c6e:	b149      	cbz	r1, 8004c84 <__ascii_wctomb+0x16>
 8004c70:	2aff      	cmp	r2, #255	; 0xff
 8004c72:	bf85      	ittet	hi
 8004c74:	238a      	movhi	r3, #138	; 0x8a
 8004c76:	6003      	strhi	r3, [r0, #0]
 8004c78:	700a      	strbls	r2, [r1, #0]
 8004c7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8004c7e:	bf98      	it	ls
 8004c80:	2001      	movls	r0, #1
 8004c82:	4770      	bx	lr
 8004c84:	4608      	mov	r0, r1
 8004c86:	4770      	bx	lr

08004c88 <sin>:
 8004c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c8a:	ec51 0b10 	vmov	r0, r1, d0
 8004c8e:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <sin+0x88>)
 8004c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dc07      	bgt.n	8004ca8 <sin+0x20>
 8004c98:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004d08 <sin+0x80>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f000 fe37 	bl	8005910 <__kernel_sin>
 8004ca2:	ec51 0b10 	vmov	r0, r1, d0
 8004ca6:	e007      	b.n	8004cb8 <sin+0x30>
 8004ca8:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <sin+0x8c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	dd09      	ble.n	8004cc2 <sin+0x3a>
 8004cae:	ee10 2a10 	vmov	r2, s0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	f7fb fa94 	bl	80001e0 <__aeabi_dsub>
 8004cb8:	ec41 0b10 	vmov	d0, r0, r1
 8004cbc:	b005      	add	sp, #20
 8004cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cc2:	4668      	mov	r0, sp
 8004cc4:	f000 f828 	bl	8004d18 <__ieee754_rem_pio2>
 8004cc8:	f000 0003 	and.w	r0, r0, #3
 8004ccc:	2801      	cmp	r0, #1
 8004cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004cd2:	ed9d 0b00 	vldr	d0, [sp]
 8004cd6:	d004      	beq.n	8004ce2 <sin+0x5a>
 8004cd8:	2802      	cmp	r0, #2
 8004cda:	d005      	beq.n	8004ce8 <sin+0x60>
 8004cdc:	b970      	cbnz	r0, 8004cfc <sin+0x74>
 8004cde:	2001      	movs	r0, #1
 8004ce0:	e7dd      	b.n	8004c9e <sin+0x16>
 8004ce2:	f000 fa0d 	bl	8005100 <__kernel_cos>
 8004ce6:	e7dc      	b.n	8004ca2 <sin+0x1a>
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f000 fe11 	bl	8005910 <__kernel_sin>
 8004cee:	ec53 2b10 	vmov	r2, r3, d0
 8004cf2:	ee10 0a10 	vmov	r0, s0
 8004cf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004cfa:	e7dd      	b.n	8004cb8 <sin+0x30>
 8004cfc:	f000 fa00 	bl	8005100 <__kernel_cos>
 8004d00:	e7f5      	b.n	8004cee <sin+0x66>
 8004d02:	bf00      	nop
 8004d04:	f3af 8000 	nop.w
	...
 8004d10:	3fe921fb 	.word	0x3fe921fb
 8004d14:	7fefffff 	.word	0x7fefffff

08004d18 <__ieee754_rem_pio2>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	ec57 6b10 	vmov	r6, r7, d0
 8004d20:	4bc3      	ldr	r3, [pc, #780]	; (8005030 <__ieee754_rem_pio2+0x318>)
 8004d22:	b08d      	sub	sp, #52	; 0x34
 8004d24:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004d28:	4598      	cmp	r8, r3
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	9704      	str	r7, [sp, #16]
 8004d2e:	dc07      	bgt.n	8004d40 <__ieee754_rem_pio2+0x28>
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	ed84 0b00 	vstr	d0, [r4]
 8004d38:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d3c:	2500      	movs	r5, #0
 8004d3e:	e027      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004d40:	4bbc      	ldr	r3, [pc, #752]	; (8005034 <__ieee754_rem_pio2+0x31c>)
 8004d42:	4598      	cmp	r8, r3
 8004d44:	dc75      	bgt.n	8004e32 <__ieee754_rem_pio2+0x11a>
 8004d46:	9b04      	ldr	r3, [sp, #16]
 8004d48:	4dbb      	ldr	r5, [pc, #748]	; (8005038 <__ieee754_rem_pio2+0x320>)
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	ee10 0a10 	vmov	r0, s0
 8004d50:	a3a9      	add	r3, pc, #676	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x2e0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	4639      	mov	r1, r7
 8004d58:	dd36      	ble.n	8004dc8 <__ieee754_rem_pio2+0xb0>
 8004d5a:	f7fb fa41 	bl	80001e0 <__aeabi_dsub>
 8004d5e:	45a8      	cmp	r8, r5
 8004d60:	4606      	mov	r6, r0
 8004d62:	460f      	mov	r7, r1
 8004d64:	d018      	beq.n	8004d98 <__ieee754_rem_pio2+0x80>
 8004d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	f7fb fa38 	bl	80001e0 <__aeabi_dsub>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	e9c4 2300 	strd	r2, r3, [r4]
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fa30 	bl	80001e0 <__aeabi_dsub>
 8004d80:	a39f      	add	r3, pc, #636	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f7fb fa2b 	bl	80001e0 <__aeabi_dsub>
 8004d8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d8e:	2501      	movs	r5, #1
 8004d90:	4628      	mov	r0, r5
 8004d92:	b00d      	add	sp, #52	; 0x34
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d98:	a39b      	add	r3, pc, #620	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fa1f 	bl	80001e0 <__aeabi_dsub>
 8004da2:	a39b      	add	r3, pc, #620	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	4606      	mov	r6, r0
 8004daa:	460f      	mov	r7, r1
 8004dac:	f7fb fa18 	bl	80001e0 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9c4 2300 	strd	r2, r3, [r4]
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fa10 	bl	80001e0 <__aeabi_dsub>
 8004dc0:	a393      	add	r3, pc, #588	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	e7de      	b.n	8004d86 <__ieee754_rem_pio2+0x6e>
 8004dc8:	f7fb fa0c 	bl	80001e4 <__adddf3>
 8004dcc:	45a8      	cmp	r8, r5
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	d016      	beq.n	8004e02 <__ieee754_rem_pio2+0xea>
 8004dd4:	a38a      	add	r3, pc, #552	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb fa03 	bl	80001e4 <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9c4 2300 	strd	r2, r3, [r4]
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb f9f9 	bl	80001e0 <__aeabi_dsub>
 8004dee:	a384      	add	r3, pc, #528	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb f9f6 	bl	80001e4 <__adddf3>
 8004df8:	f04f 35ff 	mov.w	r5, #4294967295
 8004dfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e00:	e7c6      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004e02:	a381      	add	r3, pc, #516	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb f9ec 	bl	80001e4 <__adddf3>
 8004e0c:	a380      	add	r3, pc, #512	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	f7fb f9e5 	bl	80001e4 <__adddf3>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb f9db 	bl	80001e0 <__aeabi_dsub>
 8004e2a:	a379      	add	r3, pc, #484	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	e7e0      	b.n	8004df4 <__ieee754_rem_pio2+0xdc>
 8004e32:	4b82      	ldr	r3, [pc, #520]	; (800503c <__ieee754_rem_pio2+0x324>)
 8004e34:	4598      	cmp	r8, r3
 8004e36:	f300 80d0 	bgt.w	8004fda <__ieee754_rem_pio2+0x2c2>
 8004e3a:	f000 fe23 	bl	8005a84 <fabs>
 8004e3e:	ec57 6b10 	vmov	r6, r7, d0
 8004e42:	ee10 0a10 	vmov	r0, s0
 8004e46:	a374      	add	r3, pc, #464	; (adr r3, 8005018 <__ieee754_rem_pio2+0x300>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	4639      	mov	r1, r7
 8004e4e:	f7fb fb7f 	bl	8000550 <__aeabi_dmul>
 8004e52:	2200      	movs	r2, #0
 8004e54:	4b7a      	ldr	r3, [pc, #488]	; (8005040 <__ieee754_rem_pio2+0x328>)
 8004e56:	f7fb f9c5 	bl	80001e4 <__adddf3>
 8004e5a:	f7fb fe13 	bl	8000a84 <__aeabi_d2iz>
 8004e5e:	4605      	mov	r5, r0
 8004e60:	f7fb fb0c 	bl	800047c <__aeabi_i2d>
 8004e64:	a364      	add	r3, pc, #400	; (adr r3, 8004ff8 <__ieee754_rem_pio2+0x2e0>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e6e:	f7fb fb6f 	bl	8000550 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4630      	mov	r0, r6
 8004e78:	4639      	mov	r1, r7
 8004e7a:	f7fb f9b1 	bl	80001e0 <__aeabi_dsub>
 8004e7e:	a360      	add	r3, pc, #384	; (adr r3, 8005000 <__ieee754_rem_pio2+0x2e8>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	4682      	mov	sl, r0
 8004e86:	468b      	mov	fp, r1
 8004e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e8c:	f7fb fb60 	bl	8000550 <__aeabi_dmul>
 8004e90:	2d1f      	cmp	r5, #31
 8004e92:	4606      	mov	r6, r0
 8004e94:	460f      	mov	r7, r1
 8004e96:	dc0c      	bgt.n	8004eb2 <__ieee754_rem_pio2+0x19a>
 8004e98:	1e6a      	subs	r2, r5, #1
 8004e9a:	4b6a      	ldr	r3, [pc, #424]	; (8005044 <__ieee754_rem_pio2+0x32c>)
 8004e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	d006      	beq.n	8004eb2 <__ieee754_rem_pio2+0x19a>
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	4659      	mov	r1, fp
 8004eac:	f7fb f998 	bl	80001e0 <__aeabi_dsub>
 8004eb0:	e00e      	b.n	8004ed0 <__ieee754_rem_pio2+0x1b8>
 8004eb2:	4632      	mov	r2, r6
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	4659      	mov	r1, fp
 8004eba:	f7fb f991 	bl	80001e0 <__aeabi_dsub>
 8004ebe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	9a05      	ldr	r2, [sp, #20]
 8004ec6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	dc02      	bgt.n	8004ed6 <__ieee754_rem_pio2+0x1be>
 8004ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ed4:	e039      	b.n	8004f4a <__ieee754_rem_pio2+0x232>
 8004ed6:	a34c      	add	r3, pc, #304	; (adr r3, 8005008 <__ieee754_rem_pio2+0x2f0>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ee0:	f7fb fb36 	bl	8000550 <__aeabi_dmul>
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4650      	mov	r0, sl
 8004eee:	4659      	mov	r1, fp
 8004ef0:	f7fb f976 	bl	80001e0 <__aeabi_dsub>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4680      	mov	r8, r0
 8004efa:	4689      	mov	r9, r1
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb f96e 	bl	80001e0 <__aeabi_dsub>
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	f7fb f96a 	bl	80001e0 <__aeabi_dsub>
 8004f0c:	a340      	add	r3, pc, #256	; (adr r3, 8005010 <__ieee754_rem_pio2+0x2f8>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f1a:	f7fb fb19 	bl	8000550 <__aeabi_dmul>
 8004f1e:	4632      	mov	r2, r6
 8004f20:	463b      	mov	r3, r7
 8004f22:	f7fb f95d 	bl	80001e0 <__aeabi_dsub>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	4640      	mov	r0, r8
 8004f30:	4649      	mov	r1, r9
 8004f32:	f7fb f955 	bl	80001e0 <__aeabi_dsub>
 8004f36:	9a05      	ldr	r2, [sp, #20]
 8004f38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b31      	cmp	r3, #49	; 0x31
 8004f40:	dc20      	bgt.n	8004f84 <__ieee754_rem_pio2+0x26c>
 8004f42:	e9c4 0100 	strd	r0, r1, [r4]
 8004f46:	46c2      	mov	sl, r8
 8004f48:	46cb      	mov	fp, r9
 8004f4a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f4e:	4650      	mov	r0, sl
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	4659      	mov	r1, fp
 8004f56:	f7fb f943 	bl	80001e0 <__aeabi_dsub>
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4632      	mov	r2, r6
 8004f5e:	f7fb f93f 	bl	80001e0 <__aeabi_dsub>
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f6a:	f6bf af11 	bge.w	8004d90 <__ieee754_rem_pio2+0x78>
 8004f6e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	f8c4 8000 	str.w	r8, [r4]
 8004f78:	60a0      	str	r0, [r4, #8]
 8004f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f7e:	60e3      	str	r3, [r4, #12]
 8004f80:	426d      	negs	r5, r5
 8004f82:	e705      	b.n	8004d90 <__ieee754_rem_pio2+0x78>
 8004f84:	a326      	add	r3, pc, #152	; (adr r3, 8005020 <__ieee754_rem_pio2+0x308>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f8e:	f7fb fadf 	bl	8000550 <__aeabi_dmul>
 8004f92:	4606      	mov	r6, r0
 8004f94:	460f      	mov	r7, r1
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	f7fb f91f 	bl	80001e0 <__aeabi_dsub>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4682      	mov	sl, r0
 8004fa8:	468b      	mov	fp, r1
 8004faa:	4640      	mov	r0, r8
 8004fac:	4649      	mov	r1, r9
 8004fae:	f7fb f917 	bl	80001e0 <__aeabi_dsub>
 8004fb2:	4632      	mov	r2, r6
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	f7fb f913 	bl	80001e0 <__aeabi_dsub>
 8004fba:	a31b      	add	r3, pc, #108	; (adr r3, 8005028 <__ieee754_rem_pio2+0x310>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc8:	f7fb fac2 	bl	8000550 <__aeabi_dmul>
 8004fcc:	4632      	mov	r2, r6
 8004fce:	463b      	mov	r3, r7
 8004fd0:	f7fb f906 	bl	80001e0 <__aeabi_dsub>
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	460f      	mov	r7, r1
 8004fd8:	e764      	b.n	8004ea4 <__ieee754_rem_pio2+0x18c>
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <__ieee754_rem_pio2+0x330>)
 8004fdc:	4598      	cmp	r8, r3
 8004fde:	dd35      	ble.n	800504c <__ieee754_rem_pio2+0x334>
 8004fe0:	ee10 2a10 	vmov	r2, s0
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	4639      	mov	r1, r7
 8004fea:	f7fb f8f9 	bl	80001e0 <__aeabi_dsub>
 8004fee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ff2:	e9c4 0100 	strd	r0, r1, [r4]
 8004ff6:	e6a1      	b.n	8004d3c <__ieee754_rem_pio2+0x24>
 8004ff8:	54400000 	.word	0x54400000
 8004ffc:	3ff921fb 	.word	0x3ff921fb
 8005000:	1a626331 	.word	0x1a626331
 8005004:	3dd0b461 	.word	0x3dd0b461
 8005008:	1a600000 	.word	0x1a600000
 800500c:	3dd0b461 	.word	0x3dd0b461
 8005010:	2e037073 	.word	0x2e037073
 8005014:	3ba3198a 	.word	0x3ba3198a
 8005018:	6dc9c883 	.word	0x6dc9c883
 800501c:	3fe45f30 	.word	0x3fe45f30
 8005020:	2e000000 	.word	0x2e000000
 8005024:	3ba3198a 	.word	0x3ba3198a
 8005028:	252049c1 	.word	0x252049c1
 800502c:	397b839a 	.word	0x397b839a
 8005030:	3fe921fb 	.word	0x3fe921fb
 8005034:	4002d97b 	.word	0x4002d97b
 8005038:	3ff921fb 	.word	0x3ff921fb
 800503c:	413921fb 	.word	0x413921fb
 8005040:	3fe00000 	.word	0x3fe00000
 8005044:	08005ecc 	.word	0x08005ecc
 8005048:	7fefffff 	.word	0x7fefffff
 800504c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005050:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005054:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005058:	4630      	mov	r0, r6
 800505a:	460f      	mov	r7, r1
 800505c:	f7fb fd12 	bl	8000a84 <__aeabi_d2iz>
 8005060:	f7fb fa0c 	bl	800047c <__aeabi_i2d>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005070:	f7fb f8b6 	bl	80001e0 <__aeabi_dsub>
 8005074:	2200      	movs	r2, #0
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <__ieee754_rem_pio2+0x3dc>)
 8005078:	f7fb fa6a 	bl	8000550 <__aeabi_dmul>
 800507c:	460f      	mov	r7, r1
 800507e:	4606      	mov	r6, r0
 8005080:	f7fb fd00 	bl	8000a84 <__aeabi_d2iz>
 8005084:	f7fb f9fa 	bl	800047c <__aeabi_i2d>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4630      	mov	r0, r6
 800508e:	4639      	mov	r1, r7
 8005090:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005094:	f7fb f8a4 	bl	80001e0 <__aeabi_dsub>
 8005098:	2200      	movs	r2, #0
 800509a:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <__ieee754_rem_pio2+0x3dc>)
 800509c:	f7fb fa58 	bl	8000550 <__aeabi_dmul>
 80050a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80050a8:	f04f 0803 	mov.w	r8, #3
 80050ac:	2600      	movs	r6, #0
 80050ae:	2700      	movs	r7, #0
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80050b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80050bc:	f7fb fcb0 	bl	8000a20 <__aeabi_dcmpeq>
 80050c0:	b9b0      	cbnz	r0, 80050f0 <__ieee754_rem_pio2+0x3d8>
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <__ieee754_rem_pio2+0x3e0>)
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	2302      	movs	r3, #2
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4643      	mov	r3, r8
 80050ce:	4621      	mov	r1, r4
 80050d0:	a806      	add	r0, sp, #24
 80050d2:	f000 f8dd 	bl	8005290 <__kernel_rem_pio2>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	4605      	mov	r5, r0
 80050dc:	f6bf ae58 	bge.w	8004d90 <__ieee754_rem_pio2+0x78>
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	68e3      	ldr	r3, [r4, #12]
 80050ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050ee:	e746      	b.n	8004f7e <__ieee754_rem_pio2+0x266>
 80050f0:	46d0      	mov	r8, sl
 80050f2:	e7dd      	b.n	80050b0 <__ieee754_rem_pio2+0x398>
 80050f4:	41700000 	.word	0x41700000
 80050f8:	08005f4c 	.word	0x08005f4c
 80050fc:	00000000 	.word	0x00000000

08005100 <__kernel_cos>:
 8005100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ec59 8b10 	vmov	r8, r9, d0
 8005108:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800510c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005110:	ed2d 8b02 	vpush	{d8}
 8005114:	eeb0 8a41 	vmov.f32	s16, s2
 8005118:	eef0 8a61 	vmov.f32	s17, s3
 800511c:	da07      	bge.n	800512e <__kernel_cos+0x2e>
 800511e:	ee10 0a10 	vmov	r0, s0
 8005122:	4649      	mov	r1, r9
 8005124:	f7fb fcae 	bl	8000a84 <__aeabi_d2iz>
 8005128:	2800      	cmp	r0, #0
 800512a:	f000 8089 	beq.w	8005240 <__kernel_cos+0x140>
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	4640      	mov	r0, r8
 8005134:	4649      	mov	r1, r9
 8005136:	f7fb fa0b 	bl	8000550 <__aeabi_dmul>
 800513a:	2200      	movs	r2, #0
 800513c:	4b4e      	ldr	r3, [pc, #312]	; (8005278 <__kernel_cos+0x178>)
 800513e:	4604      	mov	r4, r0
 8005140:	460d      	mov	r5, r1
 8005142:	f7fb fa05 	bl	8000550 <__aeabi_dmul>
 8005146:	a340      	add	r3, pc, #256	; (adr r3, 8005248 <__kernel_cos+0x148>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	4682      	mov	sl, r0
 800514e:	468b      	mov	fp, r1
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	f7fb f9fc 	bl	8000550 <__aeabi_dmul>
 8005158:	a33d      	add	r3, pc, #244	; (adr r3, 8005250 <__kernel_cos+0x150>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f841 	bl	80001e4 <__adddf3>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb f9f3 	bl	8000550 <__aeabi_dmul>
 800516a:	a33b      	add	r3, pc, #236	; (adr r3, 8005258 <__kernel_cos+0x158>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fb f836 	bl	80001e0 <__aeabi_dsub>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	f7fb f9ea 	bl	8000550 <__aeabi_dmul>
 800517c:	a338      	add	r3, pc, #224	; (adr r3, 8005260 <__kernel_cos+0x160>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f82f 	bl	80001e4 <__adddf3>
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	f7fb f9e1 	bl	8000550 <__aeabi_dmul>
 800518e:	a336      	add	r3, pc, #216	; (adr r3, 8005268 <__kernel_cos+0x168>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb f824 	bl	80001e0 <__aeabi_dsub>
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	f7fb f9d8 	bl	8000550 <__aeabi_dmul>
 80051a0:	a333      	add	r3, pc, #204	; (adr r3, 8005270 <__kernel_cos+0x170>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb f81d 	bl	80001e4 <__adddf3>
 80051aa:	4622      	mov	r2, r4
 80051ac:	462b      	mov	r3, r5
 80051ae:	f7fb f9cf 	bl	8000550 <__aeabi_dmul>
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	f7fb f9cb 	bl	8000550 <__aeabi_dmul>
 80051ba:	ec53 2b18 	vmov	r2, r3, d8
 80051be:	4604      	mov	r4, r0
 80051c0:	460d      	mov	r5, r1
 80051c2:	4640      	mov	r0, r8
 80051c4:	4649      	mov	r1, r9
 80051c6:	f7fb f9c3 	bl	8000550 <__aeabi_dmul>
 80051ca:	460b      	mov	r3, r1
 80051cc:	4602      	mov	r2, r0
 80051ce:	4629      	mov	r1, r5
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fb f805 	bl	80001e0 <__aeabi_dsub>
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <__kernel_cos+0x17c>)
 80051d8:	429e      	cmp	r6, r3
 80051da:	4680      	mov	r8, r0
 80051dc:	4689      	mov	r9, r1
 80051de:	dc11      	bgt.n	8005204 <__kernel_cos+0x104>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4650      	mov	r0, sl
 80051e6:	4659      	mov	r1, fp
 80051e8:	f7fa fffa 	bl	80001e0 <__aeabi_dsub>
 80051ec:	460b      	mov	r3, r1
 80051ee:	4924      	ldr	r1, [pc, #144]	; (8005280 <__kernel_cos+0x180>)
 80051f0:	4602      	mov	r2, r0
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fa fff4 	bl	80001e0 <__aeabi_dsub>
 80051f8:	ecbd 8b02 	vpop	{d8}
 80051fc:	ec41 0b10 	vmov	d0, r0, r1
 8005200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <__kernel_cos+0x184>)
 8005206:	491e      	ldr	r1, [pc, #120]	; (8005280 <__kernel_cos+0x180>)
 8005208:	429e      	cmp	r6, r3
 800520a:	bfcc      	ite	gt
 800520c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005288 <__kernel_cos+0x188>)
 800520e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005212:	2400      	movs	r4, #0
 8005214:	4622      	mov	r2, r4
 8005216:	462b      	mov	r3, r5
 8005218:	2000      	movs	r0, #0
 800521a:	f7fa ffe1 	bl	80001e0 <__aeabi_dsub>
 800521e:	4622      	mov	r2, r4
 8005220:	4606      	mov	r6, r0
 8005222:	460f      	mov	r7, r1
 8005224:	462b      	mov	r3, r5
 8005226:	4650      	mov	r0, sl
 8005228:	4659      	mov	r1, fp
 800522a:	f7fa ffd9 	bl	80001e0 <__aeabi_dsub>
 800522e:	4642      	mov	r2, r8
 8005230:	464b      	mov	r3, r9
 8005232:	f7fa ffd5 	bl	80001e0 <__aeabi_dsub>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	e7d9      	b.n	80051f4 <__kernel_cos+0xf4>
 8005240:	2000      	movs	r0, #0
 8005242:	490f      	ldr	r1, [pc, #60]	; (8005280 <__kernel_cos+0x180>)
 8005244:	e7d8      	b.n	80051f8 <__kernel_cos+0xf8>
 8005246:	bf00      	nop
 8005248:	be8838d4 	.word	0xbe8838d4
 800524c:	bda8fae9 	.word	0xbda8fae9
 8005250:	bdb4b1c4 	.word	0xbdb4b1c4
 8005254:	3e21ee9e 	.word	0x3e21ee9e
 8005258:	809c52ad 	.word	0x809c52ad
 800525c:	3e927e4f 	.word	0x3e927e4f
 8005260:	19cb1590 	.word	0x19cb1590
 8005264:	3efa01a0 	.word	0x3efa01a0
 8005268:	16c15177 	.word	0x16c15177
 800526c:	3f56c16c 	.word	0x3f56c16c
 8005270:	5555554c 	.word	0x5555554c
 8005274:	3fa55555 	.word	0x3fa55555
 8005278:	3fe00000 	.word	0x3fe00000
 800527c:	3fd33332 	.word	0x3fd33332
 8005280:	3ff00000 	.word	0x3ff00000
 8005284:	3fe90000 	.word	0x3fe90000
 8005288:	3fd20000 	.word	0x3fd20000
 800528c:	00000000 	.word	0x00000000

08005290 <__kernel_rem_pio2>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	ed2d 8b02 	vpush	{d8}
 8005298:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800529c:	1ed4      	subs	r4, r2, #3
 800529e:	9308      	str	r3, [sp, #32]
 80052a0:	9101      	str	r1, [sp, #4]
 80052a2:	4bc5      	ldr	r3, [pc, #788]	; (80055b8 <__kernel_rem_pio2+0x328>)
 80052a4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80052a6:	9009      	str	r0, [sp, #36]	; 0x24
 80052a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052ac:	9304      	str	r3, [sp, #16]
 80052ae:	9b08      	ldr	r3, [sp, #32]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	9307      	str	r3, [sp, #28]
 80052b4:	2318      	movs	r3, #24
 80052b6:	fb94 f4f3 	sdiv	r4, r4, r3
 80052ba:	f06f 0317 	mvn.w	r3, #23
 80052be:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80052c2:	fb04 3303 	mla	r3, r4, r3, r3
 80052c6:	eb03 0a02 	add.w	sl, r3, r2
 80052ca:	9b04      	ldr	r3, [sp, #16]
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80055a8 <__kernel_rem_pio2+0x318>
 80052d2:	eb03 0802 	add.w	r8, r3, r2
 80052d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80052d8:	1aa7      	subs	r7, r4, r2
 80052da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80052de:	ae22      	add	r6, sp, #136	; 0x88
 80052e0:	2500      	movs	r5, #0
 80052e2:	4545      	cmp	r5, r8
 80052e4:	dd13      	ble.n	800530e <__kernel_rem_pio2+0x7e>
 80052e6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80055a8 <__kernel_rem_pio2+0x318>
 80052ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80052ee:	2600      	movs	r6, #0
 80052f0:	9b04      	ldr	r3, [sp, #16]
 80052f2:	429e      	cmp	r6, r3
 80052f4:	dc32      	bgt.n	800535c <__kernel_rem_pio2+0xcc>
 80052f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	9b08      	ldr	r3, [sp, #32]
 80052fc:	199d      	adds	r5, r3, r6
 80052fe:	ab22      	add	r3, sp, #136	; 0x88
 8005300:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005304:	9306      	str	r3, [sp, #24]
 8005306:	ec59 8b18 	vmov	r8, r9, d8
 800530a:	2700      	movs	r7, #0
 800530c:	e01f      	b.n	800534e <__kernel_rem_pio2+0xbe>
 800530e:	42ef      	cmn	r7, r5
 8005310:	d407      	bmi.n	8005322 <__kernel_rem_pio2+0x92>
 8005312:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005316:	f7fb f8b1 	bl	800047c <__aeabi_i2d>
 800531a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800531e:	3501      	adds	r5, #1
 8005320:	e7df      	b.n	80052e2 <__kernel_rem_pio2+0x52>
 8005322:	ec51 0b18 	vmov	r0, r1, d8
 8005326:	e7f8      	b.n	800531a <__kernel_rem_pio2+0x8a>
 8005328:	9906      	ldr	r1, [sp, #24]
 800532a:	9d02      	ldr	r5, [sp, #8]
 800532c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005330:	9106      	str	r1, [sp, #24]
 8005332:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005336:	9502      	str	r5, [sp, #8]
 8005338:	f7fb f90a 	bl	8000550 <__aeabi_dmul>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4640      	mov	r0, r8
 8005342:	4649      	mov	r1, r9
 8005344:	f7fa ff4e 	bl	80001e4 <__adddf3>
 8005348:	3701      	adds	r7, #1
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	429f      	cmp	r7, r3
 8005352:	dde9      	ble.n	8005328 <__kernel_rem_pio2+0x98>
 8005354:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005358:	3601      	adds	r6, #1
 800535a:	e7c9      	b.n	80052f0 <__kernel_rem_pio2+0x60>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	aa0e      	add	r2, sp, #56	; 0x38
 8005360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005364:	930c      	str	r3, [sp, #48]	; 0x30
 8005366:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005368:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800536c:	9c04      	ldr	r4, [sp, #16]
 800536e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005370:	ab9a      	add	r3, sp, #616	; 0x268
 8005372:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005376:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800537a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800537e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005382:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005386:	ab9a      	add	r3, sp, #616	; 0x268
 8005388:	445b      	add	r3, fp
 800538a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800538e:	2500      	movs	r5, #0
 8005390:	1b63      	subs	r3, r4, r5
 8005392:	2b00      	cmp	r3, #0
 8005394:	dc78      	bgt.n	8005488 <__kernel_rem_pio2+0x1f8>
 8005396:	4650      	mov	r0, sl
 8005398:	ec49 8b10 	vmov	d0, r8, r9
 800539c:	f000 fc00 	bl	8005ba0 <scalbn>
 80053a0:	ec57 6b10 	vmov	r6, r7, d0
 80053a4:	2200      	movs	r2, #0
 80053a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80053aa:	ee10 0a10 	vmov	r0, s0
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fb f8ce 	bl	8000550 <__aeabi_dmul>
 80053b4:	ec41 0b10 	vmov	d0, r0, r1
 80053b8:	f000 fb6e 	bl	8005a98 <floor>
 80053bc:	2200      	movs	r2, #0
 80053be:	ec51 0b10 	vmov	r0, r1, d0
 80053c2:	4b7e      	ldr	r3, [pc, #504]	; (80055bc <__kernel_rem_pio2+0x32c>)
 80053c4:	f7fb f8c4 	bl	8000550 <__aeabi_dmul>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4630      	mov	r0, r6
 80053ce:	4639      	mov	r1, r7
 80053d0:	f7fa ff06 	bl	80001e0 <__aeabi_dsub>
 80053d4:	460f      	mov	r7, r1
 80053d6:	4606      	mov	r6, r0
 80053d8:	f7fb fb54 	bl	8000a84 <__aeabi_d2iz>
 80053dc:	9006      	str	r0, [sp, #24]
 80053de:	f7fb f84d 	bl	800047c <__aeabi_i2d>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fa fef9 	bl	80001e0 <__aeabi_dsub>
 80053ee:	f1ba 0f00 	cmp.w	sl, #0
 80053f2:	4606      	mov	r6, r0
 80053f4:	460f      	mov	r7, r1
 80053f6:	dd6c      	ble.n	80054d2 <__kernel_rem_pio2+0x242>
 80053f8:	1e62      	subs	r2, r4, #1
 80053fa:	ab0e      	add	r3, sp, #56	; 0x38
 80053fc:	f1ca 0118 	rsb	r1, sl, #24
 8005400:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005404:	9d06      	ldr	r5, [sp, #24]
 8005406:	fa40 f301 	asr.w	r3, r0, r1
 800540a:	441d      	add	r5, r3
 800540c:	408b      	lsls	r3, r1
 800540e:	1ac0      	subs	r0, r0, r3
 8005410:	ab0e      	add	r3, sp, #56	; 0x38
 8005412:	9506      	str	r5, [sp, #24]
 8005414:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005418:	f1ca 0317 	rsb	r3, sl, #23
 800541c:	fa40 f303 	asr.w	r3, r0, r3
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	9b02      	ldr	r3, [sp, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd62      	ble.n	80054ee <__kernel_rem_pio2+0x25e>
 8005428:	9b06      	ldr	r3, [sp, #24]
 800542a:	2200      	movs	r2, #0
 800542c:	3301      	adds	r3, #1
 800542e:	9306      	str	r3, [sp, #24]
 8005430:	4615      	mov	r5, r2
 8005432:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005436:	4294      	cmp	r4, r2
 8005438:	f300 8095 	bgt.w	8005566 <__kernel_rem_pio2+0x2d6>
 800543c:	f1ba 0f00 	cmp.w	sl, #0
 8005440:	dd07      	ble.n	8005452 <__kernel_rem_pio2+0x1c2>
 8005442:	f1ba 0f01 	cmp.w	sl, #1
 8005446:	f000 80a2 	beq.w	800558e <__kernel_rem_pio2+0x2fe>
 800544a:	f1ba 0f02 	cmp.w	sl, #2
 800544e:	f000 80c1 	beq.w	80055d4 <__kernel_rem_pio2+0x344>
 8005452:	9b02      	ldr	r3, [sp, #8]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d14a      	bne.n	80054ee <__kernel_rem_pio2+0x25e>
 8005458:	4632      	mov	r2, r6
 800545a:	463b      	mov	r3, r7
 800545c:	2000      	movs	r0, #0
 800545e:	4958      	ldr	r1, [pc, #352]	; (80055c0 <__kernel_rem_pio2+0x330>)
 8005460:	f7fa febe 	bl	80001e0 <__aeabi_dsub>
 8005464:	4606      	mov	r6, r0
 8005466:	460f      	mov	r7, r1
 8005468:	2d00      	cmp	r5, #0
 800546a:	d040      	beq.n	80054ee <__kernel_rem_pio2+0x25e>
 800546c:	4650      	mov	r0, sl
 800546e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80055b0 <__kernel_rem_pio2+0x320>
 8005472:	f000 fb95 	bl	8005ba0 <scalbn>
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	ec53 2b10 	vmov	r2, r3, d0
 800547e:	f7fa feaf 	bl	80001e0 <__aeabi_dsub>
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	e032      	b.n	80054ee <__kernel_rem_pio2+0x25e>
 8005488:	2200      	movs	r2, #0
 800548a:	4b4e      	ldr	r3, [pc, #312]	; (80055c4 <__kernel_rem_pio2+0x334>)
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb f85e 	bl	8000550 <__aeabi_dmul>
 8005494:	f7fb faf6 	bl	8000a84 <__aeabi_d2iz>
 8005498:	f7fa fff0 	bl	800047c <__aeabi_i2d>
 800549c:	2200      	movs	r2, #0
 800549e:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <__kernel_rem_pio2+0x338>)
 80054a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054a4:	f7fb f854 	bl	8000550 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4640      	mov	r0, r8
 80054ae:	4649      	mov	r1, r9
 80054b0:	f7fa fe96 	bl	80001e0 <__aeabi_dsub>
 80054b4:	f7fb fae6 	bl	8000a84 <__aeabi_d2iz>
 80054b8:	ab0e      	add	r3, sp, #56	; 0x38
 80054ba:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80054be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80054c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c6:	f7fa fe8d 	bl	80001e4 <__adddf3>
 80054ca:	3501      	adds	r5, #1
 80054cc:	4680      	mov	r8, r0
 80054ce:	4689      	mov	r9, r1
 80054d0:	e75e      	b.n	8005390 <__kernel_rem_pio2+0x100>
 80054d2:	d105      	bne.n	80054e0 <__kernel_rem_pio2+0x250>
 80054d4:	1e63      	subs	r3, r4, #1
 80054d6:	aa0e      	add	r2, sp, #56	; 0x38
 80054d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054dc:	15c3      	asrs	r3, r0, #23
 80054de:	e79f      	b.n	8005420 <__kernel_rem_pio2+0x190>
 80054e0:	2200      	movs	r2, #0
 80054e2:	4b3a      	ldr	r3, [pc, #232]	; (80055cc <__kernel_rem_pio2+0x33c>)
 80054e4:	f7fb faba 	bl	8000a5c <__aeabi_dcmpge>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d139      	bne.n	8005560 <__kernel_rem_pio2+0x2d0>
 80054ec:	9002      	str	r0, [sp, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	4630      	mov	r0, r6
 80054f4:	4639      	mov	r1, r7
 80054f6:	f7fb fa93 	bl	8000a20 <__aeabi_dcmpeq>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f000 80c7 	beq.w	800568e <__kernel_rem_pio2+0x3fe>
 8005500:	1e65      	subs	r5, r4, #1
 8005502:	462b      	mov	r3, r5
 8005504:	2200      	movs	r2, #0
 8005506:	9904      	ldr	r1, [sp, #16]
 8005508:	428b      	cmp	r3, r1
 800550a:	da6a      	bge.n	80055e2 <__kernel_rem_pio2+0x352>
 800550c:	2a00      	cmp	r2, #0
 800550e:	f000 8088 	beq.w	8005622 <__kernel_rem_pio2+0x392>
 8005512:	ab0e      	add	r3, sp, #56	; 0x38
 8005514:	f1aa 0a18 	sub.w	sl, sl, #24
 8005518:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80b4 	beq.w	800568a <__kernel_rem_pio2+0x3fa>
 8005522:	4650      	mov	r0, sl
 8005524:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80055b0 <__kernel_rem_pio2+0x320>
 8005528:	f000 fb3a 	bl	8005ba0 <scalbn>
 800552c:	00ec      	lsls	r4, r5, #3
 800552e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005530:	191e      	adds	r6, r3, r4
 8005532:	ec59 8b10 	vmov	r8, r9, d0
 8005536:	f106 0a08 	add.w	sl, r6, #8
 800553a:	462f      	mov	r7, r5
 800553c:	2f00      	cmp	r7, #0
 800553e:	f280 80df 	bge.w	8005700 <__kernel_rem_pio2+0x470>
 8005542:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80055a8 <__kernel_rem_pio2+0x318>
 8005546:	f04f 0a00 	mov.w	sl, #0
 800554a:	eba5 030a 	sub.w	r3, r5, sl
 800554e:	2b00      	cmp	r3, #0
 8005550:	f2c0 810a 	blt.w	8005768 <__kernel_rem_pio2+0x4d8>
 8005554:	f8df b078 	ldr.w	fp, [pc, #120]	; 80055d0 <__kernel_rem_pio2+0x340>
 8005558:	ec59 8b18 	vmov	r8, r9, d8
 800555c:	2700      	movs	r7, #0
 800555e:	e0f5      	b.n	800574c <__kernel_rem_pio2+0x4bc>
 8005560:	2302      	movs	r3, #2
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	e760      	b.n	8005428 <__kernel_rem_pio2+0x198>
 8005566:	ab0e      	add	r3, sp, #56	; 0x38
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	b94d      	cbnz	r5, 8005582 <__kernel_rem_pio2+0x2f2>
 800556e:	b12b      	cbz	r3, 800557c <__kernel_rem_pio2+0x2ec>
 8005570:	a80e      	add	r0, sp, #56	; 0x38
 8005572:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005576:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800557a:	2301      	movs	r3, #1
 800557c:	3201      	adds	r2, #1
 800557e:	461d      	mov	r5, r3
 8005580:	e759      	b.n	8005436 <__kernel_rem_pio2+0x1a6>
 8005582:	a80e      	add	r0, sp, #56	; 0x38
 8005584:	1acb      	subs	r3, r1, r3
 8005586:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800558a:	462b      	mov	r3, r5
 800558c:	e7f6      	b.n	800557c <__kernel_rem_pio2+0x2ec>
 800558e:	1e62      	subs	r2, r4, #1
 8005590:	ab0e      	add	r3, sp, #56	; 0x38
 8005592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005596:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800559a:	a90e      	add	r1, sp, #56	; 0x38
 800559c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80055a0:	e757      	b.n	8005452 <__kernel_rem_pio2+0x1c2>
 80055a2:	bf00      	nop
 80055a4:	f3af 8000 	nop.w
	...
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	08006098 	.word	0x08006098
 80055bc:	40200000 	.word	0x40200000
 80055c0:	3ff00000 	.word	0x3ff00000
 80055c4:	3e700000 	.word	0x3e700000
 80055c8:	41700000 	.word	0x41700000
 80055cc:	3fe00000 	.word	0x3fe00000
 80055d0:	08006058 	.word	0x08006058
 80055d4:	1e62      	subs	r2, r4, #1
 80055d6:	ab0e      	add	r3, sp, #56	; 0x38
 80055d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80055e0:	e7db      	b.n	800559a <__kernel_rem_pio2+0x30a>
 80055e2:	a90e      	add	r1, sp, #56	; 0x38
 80055e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	e78b      	b.n	8005506 <__kernel_rem_pio2+0x276>
 80055ee:	3301      	adds	r3, #1
 80055f0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d0fa      	beq.n	80055ee <__kernel_rem_pio2+0x35e>
 80055f8:	9a08      	ldr	r2, [sp, #32]
 80055fa:	4422      	add	r2, r4
 80055fc:	00d2      	lsls	r2, r2, #3
 80055fe:	a922      	add	r1, sp, #136	; 0x88
 8005600:	18e3      	adds	r3, r4, r3
 8005602:	9206      	str	r2, [sp, #24]
 8005604:	440a      	add	r2, r1
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	f10b 0108 	add.w	r1, fp, #8
 800560c:	f102 0308 	add.w	r3, r2, #8
 8005610:	1c66      	adds	r6, r4, #1
 8005612:	910a      	str	r1, [sp, #40]	; 0x28
 8005614:	2500      	movs	r5, #0
 8005616:	930d      	str	r3, [sp, #52]	; 0x34
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	42b3      	cmp	r3, r6
 800561c:	da04      	bge.n	8005628 <__kernel_rem_pio2+0x398>
 800561e:	461c      	mov	r4, r3
 8005620:	e6a6      	b.n	8005370 <__kernel_rem_pio2+0xe0>
 8005622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005624:	2301      	movs	r3, #1
 8005626:	e7e3      	b.n	80055f0 <__kernel_rem_pio2+0x360>
 8005628:	9b06      	ldr	r3, [sp, #24]
 800562a:	18ef      	adds	r7, r5, r3
 800562c:	ab22      	add	r3, sp, #136	; 0x88
 800562e:	441f      	add	r7, r3
 8005630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005632:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005636:	f7fa ff21 	bl	800047c <__aeabi_i2d>
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	461c      	mov	r4, r3
 800563e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005640:	e9c7 0100 	strd	r0, r1, [r7]
 8005644:	eb03 0b05 	add.w	fp, r3, r5
 8005648:	2700      	movs	r7, #0
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	9b07      	ldr	r3, [sp, #28]
 8005654:	429f      	cmp	r7, r3
 8005656:	dd08      	ble.n	800566a <__kernel_rem_pio2+0x3da>
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	aa72      	add	r2, sp, #456	; 0x1c8
 800565c:	18eb      	adds	r3, r5, r3
 800565e:	4413      	add	r3, r2
 8005660:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005664:	3601      	adds	r6, #1
 8005666:	3508      	adds	r5, #8
 8005668:	e7d6      	b.n	8005618 <__kernel_rem_pio2+0x388>
 800566a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800566e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005672:	f7fa ff6d 	bl	8000550 <__aeabi_dmul>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4640      	mov	r0, r8
 800567c:	4649      	mov	r1, r9
 800567e:	f7fa fdb1 	bl	80001e4 <__adddf3>
 8005682:	3701      	adds	r7, #1
 8005684:	4680      	mov	r8, r0
 8005686:	4689      	mov	r9, r1
 8005688:	e7e3      	b.n	8005652 <__kernel_rem_pio2+0x3c2>
 800568a:	3d01      	subs	r5, #1
 800568c:	e741      	b.n	8005512 <__kernel_rem_pio2+0x282>
 800568e:	f1ca 0000 	rsb	r0, sl, #0
 8005692:	ec47 6b10 	vmov	d0, r6, r7
 8005696:	f000 fa83 	bl	8005ba0 <scalbn>
 800569a:	ec57 6b10 	vmov	r6, r7, d0
 800569e:	2200      	movs	r2, #0
 80056a0:	4b99      	ldr	r3, [pc, #612]	; (8005908 <__kernel_rem_pio2+0x678>)
 80056a2:	ee10 0a10 	vmov	r0, s0
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb f9d8 	bl	8000a5c <__aeabi_dcmpge>
 80056ac:	b1f8      	cbz	r0, 80056ee <__kernel_rem_pio2+0x45e>
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b96      	ldr	r3, [pc, #600]	; (800590c <__kernel_rem_pio2+0x67c>)
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fa ff4b 	bl	8000550 <__aeabi_dmul>
 80056ba:	f7fb f9e3 	bl	8000a84 <__aeabi_d2iz>
 80056be:	4680      	mov	r8, r0
 80056c0:	f7fa fedc 	bl	800047c <__aeabi_i2d>
 80056c4:	2200      	movs	r2, #0
 80056c6:	4b90      	ldr	r3, [pc, #576]	; (8005908 <__kernel_rem_pio2+0x678>)
 80056c8:	f7fa ff42 	bl	8000550 <__aeabi_dmul>
 80056cc:	460b      	mov	r3, r1
 80056ce:	4602      	mov	r2, r0
 80056d0:	4639      	mov	r1, r7
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7fa fd84 	bl	80001e0 <__aeabi_dsub>
 80056d8:	f7fb f9d4 	bl	8000a84 <__aeabi_d2iz>
 80056dc:	1c65      	adds	r5, r4, #1
 80056de:	ab0e      	add	r3, sp, #56	; 0x38
 80056e0:	f10a 0a18 	add.w	sl, sl, #24
 80056e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056e8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80056ec:	e719      	b.n	8005522 <__kernel_rem_pio2+0x292>
 80056ee:	4630      	mov	r0, r6
 80056f0:	4639      	mov	r1, r7
 80056f2:	f7fb f9c7 	bl	8000a84 <__aeabi_d2iz>
 80056f6:	ab0e      	add	r3, sp, #56	; 0x38
 80056f8:	4625      	mov	r5, r4
 80056fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80056fe:	e710      	b.n	8005522 <__kernel_rem_pio2+0x292>
 8005700:	ab0e      	add	r3, sp, #56	; 0x38
 8005702:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005706:	f7fa feb9 	bl	800047c <__aeabi_i2d>
 800570a:	4642      	mov	r2, r8
 800570c:	464b      	mov	r3, r9
 800570e:	f7fa ff1f 	bl	8000550 <__aeabi_dmul>
 8005712:	2200      	movs	r2, #0
 8005714:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005718:	4b7c      	ldr	r3, [pc, #496]	; (800590c <__kernel_rem_pio2+0x67c>)
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa ff17 	bl	8000550 <__aeabi_dmul>
 8005722:	3f01      	subs	r7, #1
 8005724:	4680      	mov	r8, r0
 8005726:	4689      	mov	r9, r1
 8005728:	e708      	b.n	800553c <__kernel_rem_pio2+0x2ac>
 800572a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005736:	f7fa ff0b 	bl	8000550 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fa fd4f 	bl	80001e4 <__adddf3>
 8005746:	3701      	adds	r7, #1
 8005748:	4680      	mov	r8, r0
 800574a:	4689      	mov	r9, r1
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	429f      	cmp	r7, r3
 8005750:	dc01      	bgt.n	8005756 <__kernel_rem_pio2+0x4c6>
 8005752:	45ba      	cmp	sl, r7
 8005754:	dae9      	bge.n	800572a <__kernel_rem_pio2+0x49a>
 8005756:	ab4a      	add	r3, sp, #296	; 0x128
 8005758:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800575c:	e9c3 8900 	strd	r8, r9, [r3]
 8005760:	f10a 0a01 	add.w	sl, sl, #1
 8005764:	3e08      	subs	r6, #8
 8005766:	e6f0      	b.n	800554a <__kernel_rem_pio2+0x2ba>
 8005768:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800576a:	2b03      	cmp	r3, #3
 800576c:	d85b      	bhi.n	8005826 <__kernel_rem_pio2+0x596>
 800576e:	e8df f003 	tbb	[pc, r3]
 8005772:	264a      	.short	0x264a
 8005774:	0226      	.short	0x0226
 8005776:	ab9a      	add	r3, sp, #616	; 0x268
 8005778:	441c      	add	r4, r3
 800577a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800577e:	46a2      	mov	sl, r4
 8005780:	46ab      	mov	fp, r5
 8005782:	f1bb 0f00 	cmp.w	fp, #0
 8005786:	dc6c      	bgt.n	8005862 <__kernel_rem_pio2+0x5d2>
 8005788:	46a2      	mov	sl, r4
 800578a:	46ab      	mov	fp, r5
 800578c:	f1bb 0f01 	cmp.w	fp, #1
 8005790:	f300 8086 	bgt.w	80058a0 <__kernel_rem_pio2+0x610>
 8005794:	2000      	movs	r0, #0
 8005796:	2100      	movs	r1, #0
 8005798:	2d01      	cmp	r5, #1
 800579a:	f300 80a0 	bgt.w	80058de <__kernel_rem_pio2+0x64e>
 800579e:	9b02      	ldr	r3, [sp, #8]
 80057a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80057a4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 809e 	bne.w	80058ea <__kernel_rem_pio2+0x65a>
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	e9c3 7800 	strd	r7, r8, [r3]
 80057b4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80057b8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80057bc:	e033      	b.n	8005826 <__kernel_rem_pio2+0x596>
 80057be:	3408      	adds	r4, #8
 80057c0:	ab4a      	add	r3, sp, #296	; 0x128
 80057c2:	441c      	add	r4, r3
 80057c4:	462e      	mov	r6, r5
 80057c6:	2000      	movs	r0, #0
 80057c8:	2100      	movs	r1, #0
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	da3a      	bge.n	8005844 <__kernel_rem_pio2+0x5b4>
 80057ce:	9b02      	ldr	r3, [sp, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03d      	beq.n	8005850 <__kernel_rem_pio2+0x5c0>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057da:	9c01      	ldr	r4, [sp, #4]
 80057dc:	e9c4 2300 	strd	r2, r3, [r4]
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80057e8:	f7fa fcfa 	bl	80001e0 <__aeabi_dsub>
 80057ec:	ae4c      	add	r6, sp, #304	; 0x130
 80057ee:	2401      	movs	r4, #1
 80057f0:	42a5      	cmp	r5, r4
 80057f2:	da30      	bge.n	8005856 <__kernel_rem_pio2+0x5c6>
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	b113      	cbz	r3, 80057fe <__kernel_rem_pio2+0x56e>
 80057f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057fc:	4619      	mov	r1, r3
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005804:	e00f      	b.n	8005826 <__kernel_rem_pio2+0x596>
 8005806:	ab9a      	add	r3, sp, #616	; 0x268
 8005808:	441c      	add	r4, r3
 800580a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800580e:	2000      	movs	r0, #0
 8005810:	2100      	movs	r1, #0
 8005812:	2d00      	cmp	r5, #0
 8005814:	da10      	bge.n	8005838 <__kernel_rem_pio2+0x5a8>
 8005816:	9b02      	ldr	r3, [sp, #8]
 8005818:	b113      	cbz	r3, 8005820 <__kernel_rem_pio2+0x590>
 800581a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800581e:	4619      	mov	r1, r3
 8005820:	9b01      	ldr	r3, [sp, #4]
 8005822:	e9c3 0100 	strd	r0, r1, [r3]
 8005826:	9b06      	ldr	r3, [sp, #24]
 8005828:	f003 0007 	and.w	r0, r3, #7
 800582c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005830:	ecbd 8b02 	vpop	{d8}
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800583c:	f7fa fcd2 	bl	80001e4 <__adddf3>
 8005840:	3d01      	subs	r5, #1
 8005842:	e7e6      	b.n	8005812 <__kernel_rem_pio2+0x582>
 8005844:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005848:	f7fa fccc 	bl	80001e4 <__adddf3>
 800584c:	3e01      	subs	r6, #1
 800584e:	e7bc      	b.n	80057ca <__kernel_rem_pio2+0x53a>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	e7c1      	b.n	80057da <__kernel_rem_pio2+0x54a>
 8005856:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800585a:	f7fa fcc3 	bl	80001e4 <__adddf3>
 800585e:	3401      	adds	r4, #1
 8005860:	e7c6      	b.n	80057f0 <__kernel_rem_pio2+0x560>
 8005862:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005866:	ed3a 7b02 	vldmdb	sl!, {d7}
 800586a:	4640      	mov	r0, r8
 800586c:	ec53 2b17 	vmov	r2, r3, d7
 8005870:	4649      	mov	r1, r9
 8005872:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005876:	f7fa fcb5 	bl	80001e4 <__adddf3>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4606      	mov	r6, r0
 8005880:	460f      	mov	r7, r1
 8005882:	4640      	mov	r0, r8
 8005884:	4649      	mov	r1, r9
 8005886:	f7fa fcab 	bl	80001e0 <__aeabi_dsub>
 800588a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800588e:	f7fa fca9 	bl	80001e4 <__adddf3>
 8005892:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005896:	e9ca 0100 	strd	r0, r1, [sl]
 800589a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800589e:	e770      	b.n	8005782 <__kernel_rem_pio2+0x4f2>
 80058a0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80058a4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80058a8:	4630      	mov	r0, r6
 80058aa:	ec53 2b17 	vmov	r2, r3, d7
 80058ae:	4639      	mov	r1, r7
 80058b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058b4:	f7fa fc96 	bl	80001e4 <__adddf3>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4680      	mov	r8, r0
 80058be:	4689      	mov	r9, r1
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa fc8c 	bl	80001e0 <__aeabi_dsub>
 80058c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058cc:	f7fa fc8a 	bl	80001e4 <__adddf3>
 80058d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058d4:	e9ca 0100 	strd	r0, r1, [sl]
 80058d8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80058dc:	e756      	b.n	800578c <__kernel_rem_pio2+0x4fc>
 80058de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058e2:	f7fa fc7f 	bl	80001e4 <__adddf3>
 80058e6:	3d01      	subs	r5, #1
 80058e8:	e756      	b.n	8005798 <__kernel_rem_pio2+0x508>
 80058ea:	9b01      	ldr	r3, [sp, #4]
 80058ec:	9a01      	ldr	r2, [sp, #4]
 80058ee:	601f      	str	r7, [r3, #0]
 80058f0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80058f4:	605c      	str	r4, [r3, #4]
 80058f6:	609d      	str	r5, [r3, #8]
 80058f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058fc:	60d3      	str	r3, [r2, #12]
 80058fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005902:	6110      	str	r0, [r2, #16]
 8005904:	6153      	str	r3, [r2, #20]
 8005906:	e78e      	b.n	8005826 <__kernel_rem_pio2+0x596>
 8005908:	41700000 	.word	0x41700000
 800590c:	3e700000 	.word	0x3e700000

08005910 <__kernel_sin>:
 8005910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	ec55 4b10 	vmov	r4, r5, d0
 8005918:	b085      	sub	sp, #20
 800591a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800591e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005922:	ed8d 1b00 	vstr	d1, [sp]
 8005926:	9002      	str	r0, [sp, #8]
 8005928:	da06      	bge.n	8005938 <__kernel_sin+0x28>
 800592a:	ee10 0a10 	vmov	r0, s0
 800592e:	4629      	mov	r1, r5
 8005930:	f7fb f8a8 	bl	8000a84 <__aeabi_d2iz>
 8005934:	2800      	cmp	r0, #0
 8005936:	d051      	beq.n	80059dc <__kernel_sin+0xcc>
 8005938:	4622      	mov	r2, r4
 800593a:	462b      	mov	r3, r5
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fa fe06 	bl	8000550 <__aeabi_dmul>
 8005944:	4682      	mov	sl, r0
 8005946:	468b      	mov	fp, r1
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fdfe 	bl	8000550 <__aeabi_dmul>
 8005954:	a341      	add	r3, pc, #260	; (adr r3, 8005a5c <__kernel_sin+0x14c>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	4680      	mov	r8, r0
 800595c:	4689      	mov	r9, r1
 800595e:	4650      	mov	r0, sl
 8005960:	4659      	mov	r1, fp
 8005962:	f7fa fdf5 	bl	8000550 <__aeabi_dmul>
 8005966:	a33f      	add	r3, pc, #252	; (adr r3, 8005a64 <__kernel_sin+0x154>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fa fc38 	bl	80001e0 <__aeabi_dsub>
 8005970:	4652      	mov	r2, sl
 8005972:	465b      	mov	r3, fp
 8005974:	f7fa fdec 	bl	8000550 <__aeabi_dmul>
 8005978:	a33c      	add	r3, pc, #240	; (adr r3, 8005a6c <__kernel_sin+0x15c>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fa fc31 	bl	80001e4 <__adddf3>
 8005982:	4652      	mov	r2, sl
 8005984:	465b      	mov	r3, fp
 8005986:	f7fa fde3 	bl	8000550 <__aeabi_dmul>
 800598a:	a33a      	add	r3, pc, #232	; (adr r3, 8005a74 <__kernel_sin+0x164>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f7fa fc26 	bl	80001e0 <__aeabi_dsub>
 8005994:	4652      	mov	r2, sl
 8005996:	465b      	mov	r3, fp
 8005998:	f7fa fdda 	bl	8000550 <__aeabi_dmul>
 800599c:	a337      	add	r3, pc, #220	; (adr r3, 8005a7c <__kernel_sin+0x16c>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc1f 	bl	80001e4 <__adddf3>
 80059a6:	9b02      	ldr	r3, [sp, #8]
 80059a8:	4606      	mov	r6, r0
 80059aa:	460f      	mov	r7, r1
 80059ac:	b9db      	cbnz	r3, 80059e6 <__kernel_sin+0xd6>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4650      	mov	r0, sl
 80059b4:	4659      	mov	r1, fp
 80059b6:	f7fa fdcb 	bl	8000550 <__aeabi_dmul>
 80059ba:	a325      	add	r3, pc, #148	; (adr r3, 8005a50 <__kernel_sin+0x140>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f7fa fc0e 	bl	80001e0 <__aeabi_dsub>
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	f7fa fdc2 	bl	8000550 <__aeabi_dmul>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4620      	mov	r0, r4
 80059d2:	4629      	mov	r1, r5
 80059d4:	f7fa fc06 	bl	80001e4 <__adddf3>
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	ec45 4b10 	vmov	d0, r4, r5
 80059e0:	b005      	add	sp, #20
 80059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e6:	2200      	movs	r2, #0
 80059e8:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <__kernel_sin+0x148>)
 80059ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059ee:	f7fa fdaf 	bl	8000550 <__aeabi_dmul>
 80059f2:	4632      	mov	r2, r6
 80059f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f8:	463b      	mov	r3, r7
 80059fa:	4640      	mov	r0, r8
 80059fc:	4649      	mov	r1, r9
 80059fe:	f7fa fda7 	bl	8000550 <__aeabi_dmul>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0a:	f7fa fbe9 	bl	80001e0 <__aeabi_dsub>
 8005a0e:	4652      	mov	r2, sl
 8005a10:	465b      	mov	r3, fp
 8005a12:	f7fa fd9d 	bl	8000550 <__aeabi_dmul>
 8005a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1a:	f7fa fbe1 	bl	80001e0 <__aeabi_dsub>
 8005a1e:	a30c      	add	r3, pc, #48	; (adr r3, 8005a50 <__kernel_sin+0x140>)
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fa fd90 	bl	8000550 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fa fbd4 	bl	80001e4 <__adddf3>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4620      	mov	r0, r4
 8005a42:	4629      	mov	r1, r5
 8005a44:	f7fa fbcc 	bl	80001e0 <__aeabi_dsub>
 8005a48:	e7c6      	b.n	80059d8 <__kernel_sin+0xc8>
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w
 8005a50:	55555549 	.word	0x55555549
 8005a54:	3fc55555 	.word	0x3fc55555
 8005a58:	3fe00000 	.word	0x3fe00000
 8005a5c:	5acfd57c 	.word	0x5acfd57c
 8005a60:	3de5d93a 	.word	0x3de5d93a
 8005a64:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a68:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a6c:	57b1fe7d 	.word	0x57b1fe7d
 8005a70:	3ec71de3 	.word	0x3ec71de3
 8005a74:	19c161d5 	.word	0x19c161d5
 8005a78:	3f2a01a0 	.word	0x3f2a01a0
 8005a7c:	1110f8a6 	.word	0x1110f8a6
 8005a80:	3f811111 	.word	0x3f811111

08005a84 <fabs>:
 8005a84:	ec51 0b10 	vmov	r0, r1, d0
 8005a88:	ee10 2a10 	vmov	r2, s0
 8005a8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a90:	ec43 2b10 	vmov	d0, r2, r3
 8005a94:	4770      	bx	lr
	...

08005a98 <floor>:
 8005a98:	ec51 0b10 	vmov	r0, r1, d0
 8005a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005aa4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005aa8:	2e13      	cmp	r6, #19
 8005aaa:	460c      	mov	r4, r1
 8005aac:	ee10 5a10 	vmov	r5, s0
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	dc34      	bgt.n	8005b1e <floor+0x86>
 8005ab4:	2e00      	cmp	r6, #0
 8005ab6:	da16      	bge.n	8005ae6 <floor+0x4e>
 8005ab8:	a335      	add	r3, pc, #212	; (adr r3, 8005b90 <floor+0xf8>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fb91 	bl	80001e4 <__adddf3>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f7fa ffd3 	bl	8000a70 <__aeabi_dcmpgt>
 8005aca:	b148      	cbz	r0, 8005ae0 <floor+0x48>
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	da59      	bge.n	8005b84 <floor+0xec>
 8005ad0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ad4:	4a30      	ldr	r2, [pc, #192]	; (8005b98 <floor+0x100>)
 8005ad6:	432b      	orrs	r3, r5
 8005ad8:	2500      	movs	r5, #0
 8005ada:	42ab      	cmp	r3, r5
 8005adc:	bf18      	it	ne
 8005ade:	4614      	movne	r4, r2
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	e025      	b.n	8005b32 <floor+0x9a>
 8005ae6:	4f2d      	ldr	r7, [pc, #180]	; (8005b9c <floor+0x104>)
 8005ae8:	4137      	asrs	r7, r6
 8005aea:	ea01 0307 	and.w	r3, r1, r7
 8005aee:	4303      	orrs	r3, r0
 8005af0:	d01f      	beq.n	8005b32 <floor+0x9a>
 8005af2:	a327      	add	r3, pc, #156	; (adr r3, 8005b90 <floor+0xf8>)
 8005af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af8:	f7fa fb74 	bl	80001e4 <__adddf3>
 8005afc:	2200      	movs	r2, #0
 8005afe:	2300      	movs	r3, #0
 8005b00:	f7fa ffb6 	bl	8000a70 <__aeabi_dcmpgt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0eb      	beq.n	8005ae0 <floor+0x48>
 8005b08:	2c00      	cmp	r4, #0
 8005b0a:	bfbe      	ittt	lt
 8005b0c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b10:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b14:	19a4      	addlt	r4, r4, r6
 8005b16:	ea24 0407 	bic.w	r4, r4, r7
 8005b1a:	2500      	movs	r5, #0
 8005b1c:	e7e0      	b.n	8005ae0 <floor+0x48>
 8005b1e:	2e33      	cmp	r6, #51	; 0x33
 8005b20:	dd0b      	ble.n	8005b3a <floor+0xa2>
 8005b22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005b26:	d104      	bne.n	8005b32 <floor+0x9a>
 8005b28:	ee10 2a10 	vmov	r2, s0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	f7fa fb59 	bl	80001e4 <__adddf3>
 8005b32:	ec41 0b10 	vmov	d0, r0, r1
 8005b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	fa23 f707 	lsr.w	r7, r3, r7
 8005b46:	4207      	tst	r7, r0
 8005b48:	d0f3      	beq.n	8005b32 <floor+0x9a>
 8005b4a:	a311      	add	r3, pc, #68	; (adr r3, 8005b90 <floor+0xf8>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fb48 	bl	80001e4 <__adddf3>
 8005b54:	2200      	movs	r2, #0
 8005b56:	2300      	movs	r3, #0
 8005b58:	f7fa ff8a 	bl	8000a70 <__aeabi_dcmpgt>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d0bf      	beq.n	8005ae0 <floor+0x48>
 8005b60:	2c00      	cmp	r4, #0
 8005b62:	da02      	bge.n	8005b6a <floor+0xd2>
 8005b64:	2e14      	cmp	r6, #20
 8005b66:	d103      	bne.n	8005b70 <floor+0xd8>
 8005b68:	3401      	adds	r4, #1
 8005b6a:	ea25 0507 	bic.w	r5, r5, r7
 8005b6e:	e7b7      	b.n	8005ae0 <floor+0x48>
 8005b70:	2301      	movs	r3, #1
 8005b72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005b76:	fa03 f606 	lsl.w	r6, r3, r6
 8005b7a:	4435      	add	r5, r6
 8005b7c:	4545      	cmp	r5, r8
 8005b7e:	bf38      	it	cc
 8005b80:	18e4      	addcc	r4, r4, r3
 8005b82:	e7f2      	b.n	8005b6a <floor+0xd2>
 8005b84:	2500      	movs	r5, #0
 8005b86:	462c      	mov	r4, r5
 8005b88:	e7aa      	b.n	8005ae0 <floor+0x48>
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w
 8005b90:	8800759c 	.word	0x8800759c
 8005b94:	7e37e43c 	.word	0x7e37e43c
 8005b98:	bff00000 	.word	0xbff00000
 8005b9c:	000fffff 	.word	0x000fffff

08005ba0 <scalbn>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	ec55 4b10 	vmov	r4, r5, d0
 8005ba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005baa:	4606      	mov	r6, r0
 8005bac:	462b      	mov	r3, r5
 8005bae:	b9aa      	cbnz	r2, 8005bdc <scalbn+0x3c>
 8005bb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	d03b      	beq.n	8005c30 <scalbn+0x90>
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <scalbn+0xe0>)
 8005bba:	4629      	mov	r1, r5
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	ee10 0a10 	vmov	r0, s0
 8005bc2:	f7fa fcc5 	bl	8000550 <__aeabi_dmul>
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <scalbn+0xe4>)
 8005bc8:	429e      	cmp	r6, r3
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	da12      	bge.n	8005bf6 <scalbn+0x56>
 8005bd0:	a327      	add	r3, pc, #156	; (adr r3, 8005c70 <scalbn+0xd0>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fcbb 	bl	8000550 <__aeabi_dmul>
 8005bda:	e009      	b.n	8005bf0 <scalbn+0x50>
 8005bdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005be0:	428a      	cmp	r2, r1
 8005be2:	d10c      	bne.n	8005bfe <scalbn+0x5e>
 8005be4:	ee10 2a10 	vmov	r2, s0
 8005be8:	4620      	mov	r0, r4
 8005bea:	4629      	mov	r1, r5
 8005bec:	f7fa fafa 	bl	80001e4 <__adddf3>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	e01c      	b.n	8005c30 <scalbn+0x90>
 8005bf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	3a36      	subs	r2, #54	; 0x36
 8005bfe:	4432      	add	r2, r6
 8005c00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c04:	428a      	cmp	r2, r1
 8005c06:	dd0b      	ble.n	8005c20 <scalbn+0x80>
 8005c08:	ec45 4b11 	vmov	d1, r4, r5
 8005c0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005c78 <scalbn+0xd8>
 8005c10:	f000 f83c 	bl	8005c8c <copysign>
 8005c14:	a318      	add	r3, pc, #96	; (adr r3, 8005c78 <scalbn+0xd8>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	ec51 0b10 	vmov	r0, r1, d0
 8005c1e:	e7da      	b.n	8005bd6 <scalbn+0x36>
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	dd08      	ble.n	8005c36 <scalbn+0x96>
 8005c24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c30:	ec45 4b10 	vmov	d0, r4, r5
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c3a:	da0d      	bge.n	8005c58 <scalbn+0xb8>
 8005c3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c40:	429e      	cmp	r6, r3
 8005c42:	ec45 4b11 	vmov	d1, r4, r5
 8005c46:	dce1      	bgt.n	8005c0c <scalbn+0x6c>
 8005c48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005c70 <scalbn+0xd0>
 8005c4c:	f000 f81e 	bl	8005c8c <copysign>
 8005c50:	a307      	add	r3, pc, #28	; (adr r3, 8005c70 <scalbn+0xd0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	e7e0      	b.n	8005c1a <scalbn+0x7a>
 8005c58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c5c:	3236      	adds	r2, #54	; 0x36
 8005c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <scalbn+0xe8>)
 8005c6e:	e7b2      	b.n	8005bd6 <scalbn+0x36>
 8005c70:	c2f8f359 	.word	0xc2f8f359
 8005c74:	01a56e1f 	.word	0x01a56e1f
 8005c78:	8800759c 	.word	0x8800759c
 8005c7c:	7e37e43c 	.word	0x7e37e43c
 8005c80:	43500000 	.word	0x43500000
 8005c84:	ffff3cb0 	.word	0xffff3cb0
 8005c88:	3c900000 	.word	0x3c900000

08005c8c <copysign>:
 8005c8c:	ec51 0b10 	vmov	r0, r1, d0
 8005c90:	ee11 0a90 	vmov	r0, s3
 8005c94:	ee10 2a10 	vmov	r2, s0
 8005c98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005ca0:	ea41 0300 	orr.w	r3, r1, r0
 8005ca4:	ec43 2b10 	vmov	d0, r2, r3
 8005ca8:	4770      	bx	lr
	...

08005cac <_init>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	bf00      	nop
 8005cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb2:	bc08      	pop	{r3}
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	4770      	bx	lr

08005cb8 <_fini>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr
